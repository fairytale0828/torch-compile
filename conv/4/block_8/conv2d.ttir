module {
  tt.func public @conv2d_kernel_0d1234c567c8d91011de12de1314c15d16d17e18e19de20de21e22c23c24c25c26c27c28c29c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32, %arg8: i32, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32, %arg12: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg13: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg14: i32 {tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg18: i32 {tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<true> : tensor<1x4xi1>
    %cst_0 = arith.constant dense<0> : tensor<1x4xi32>
    %cst_1 = arith.constant dense<true> : tensor<4x1xi1>
    %cst_2 = arith.constant dense<0> : tensor<4x1xi32>
    %cst_3 = arith.constant 0.000000e+00 : f32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = tt.get_program_id z : i32
    %3 = tt.addptr %arg12, %1 : !tt.ptr<f32, 1>, i32
    %4 = tt.load %3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %5 = arith.muli %0, %arg16 : i32
    %6 = arith.muli %1, %arg17 : i32
    %7 = arith.muli %2, %arg18 : i32
    %8 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %9 = tt.expand_dims %8 {axis = 1 : i32} : (tensor<4xi32>) -> tensor<4x1xi32>
    %10 = tt.splat %arg7 : (i32) -> tensor<4x1xi32>
    %11 = arith.cmpi slt, %9, %10 : tensor<4x1xi32>
    %12 = tt.splat %arg11 : (i32) -> tensor<4x1xi32>
    %13 = arith.muli %9, %12 : tensor<4x1xi32>
    %14 = tt.expand_dims %8 {axis = 0 : i32} : (tensor<4xi32>) -> tensor<1x4xi32>
    %15 = tt.splat %arg8 : (i32) -> tensor<1x4xi32>
    %16 = arith.cmpi slt, %14, %15 : tensor<1x4xi32>
    %17 = tt.broadcast %11 : (tensor<4x1xi1>) -> tensor<4x4xi1>
    %18 = tt.broadcast %16 : (tensor<1x4xi1>) -> tensor<4x4xi1>
    %19 = arith.andi %17, %18 : tensor<4x4xi1>
    %20 = arith.subi %2, %c1_i32 : i32
    %21 = tt.splat %20 : (i32) -> tensor<4xi32>
    %22 = arith.addi %21, %8 : tensor<4xi32>
    %23 = tt.expand_dims %22 {axis = 1 : i32} : (tensor<4xi32>) -> tensor<4x1xi32>
    %24 = arith.cmpi slt, %23, %cst_2 : tensor<4x1xi32>
    %25 = arith.xori %24, %cst_1 : tensor<4x1xi1>
    %26 = tt.splat %arg4 : (i32) -> tensor<4x1xi32>
    %27 = arith.cmpi slt, %23, %26 : tensor<4x1xi32>
    %28 = arith.andi %25, %27 : tensor<4x1xi1>
    %29 = tt.splat %arg3 : (i32) -> tensor<4x1xi32>
    %30 = arith.muli %23, %29 : tensor<4x1xi32>
    %31 = tt.splat %arg5 : (i32) -> tensor<1x4xi32>
    %32 = tt.broadcast %28 : (tensor<4x1xi1>) -> tensor<4x4xi1>
    %33 = arith.muli %1, %arg2 : i32
    %34 = tt.addptr %arg0, %33 : !tt.ptr<f32, 1>, i32
    %35 = tt.splat %34 : (!tt.ptr<f32, 1>) -> tensor<4x1x!tt.ptr<f32, 1>>
    %36 = tt.addptr %35, %30 : tensor<4x1x!tt.ptr<f32, 1>>, tensor<4x1xi32>
    %37 = tt.broadcast %36 : (tensor<4x1x!tt.ptr<f32, 1>>) -> tensor<4x4x!tt.ptr<f32, 1>>
    %38 = arith.muli %1, %arg9 : i32
    %39 = tt.addptr %arg6, %38 : !tt.ptr<f32, 1>, i32
    %40 = arith.muli %1, %arg10 : i32
    %41 = tt.addptr %39, %40 : !tt.ptr<f32, 1>, i32
    %42 = tt.splat %41 : (!tt.ptr<f32, 1>) -> tensor<4x1x!tt.ptr<f32, 1>>
    %43 = tt.addptr %42, %13 : tensor<4x1x!tt.ptr<f32, 1>>, tensor<4x1xi32>
    %44 = tt.broadcast %43 : (tensor<4x1x!tt.ptr<f32, 1>>) -> tensor<4x4x!tt.ptr<f32, 1>>
    %45 = tt.broadcast %14 : (tensor<1x4xi32>) -> tensor<4x4xi32>
    %46 = tt.addptr %44, %45 : tensor<4x4x!tt.ptr<f32, 1>>, tensor<4x4xi32>
    %47 = tt.addptr %arg13, %5 : !tt.ptr<f32, 1>, i32
    %48 = tt.addptr %47, %6 : !tt.ptr<f32, 1>, i32
    %49 = tt.addptr %48, %7 : !tt.ptr<f32, 1>, i32
    scf.for %arg19 = %c0_i32 to %arg15 step %c1_i32  : i32 {
      %50 = arith.subi %arg19, %c1_i32 : i32
      %51 = tt.splat %50 : (i32) -> tensor<4xi32>
      %52 = arith.addi %51, %8 : tensor<4xi32>
      %53 = tt.expand_dims %52 {axis = 0 : i32} : (tensor<4xi32>) -> tensor<1x4xi32>
      %54 = arith.cmpi slt, %53, %cst_0 : tensor<1x4xi32>
      %55 = arith.xori %54, %cst : tensor<1x4xi1>
      %56 = arith.cmpi slt, %53, %31 : tensor<1x4xi32>
      %57 = arith.andi %55, %56 : tensor<1x4xi1>
      %58 = tt.broadcast %57 : (tensor<1x4xi1>) -> tensor<4x4xi1>
      %59 = arith.andi %32, %58 : tensor<4x4xi1>
      %60 = tt.broadcast %53 : (tensor<1x4xi32>) -> tensor<4x4xi32>
      %61 = tt.addptr %37, %60 : tensor<4x4x!tt.ptr<f32, 1>>, tensor<4x4xi32>
      %62 = tt.load %61, %59 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<4x4xf32>
      %63 = tt.load %46, %19 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<4x4xf32>
      %64 = arith.mulf %62, %63 : tensor<4x4xf32>
      %65 = tt.reshape %64 {allow_reorder = true} : tensor<4x4xf32> -> tensor<16xf32>
      %66 = "tt.reduce"(%65) <{axis = 0 : i32}> ({
      ^bb0(%arg20: f32, %arg21: f32):
        %70 = arith.addf %arg20, %arg21 : f32
        tt.reduce.return %70 : f32
      }) : (tensor<16xf32>) -> f32
      %67 = arith.addf %66, %cst_3 : f32
      %68 = tt.addptr %49, %arg19 : !tt.ptr<f32, 1>, i32
      %69 = arith.addf %67, %4 : f32
      tt.store %68, %69 {cache = 1 : i32, evict = 1 : i32} : f32
    }
    tt.return
  }
}
