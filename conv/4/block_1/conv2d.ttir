module {
  tt.func public @conv2d_kernel_0d1234c567c8d91011de12de1314c15d16d17e18e19de20de21e22c23c24c25c26c27c28c29c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32, %arg8: i32, %arg9: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg10: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg11: i32, %arg12: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg13: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg14: i32 {tt.max_divisibility = 8 : i32}, %arg15: i32 {tt.max_divisibility = 8 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg18: i32 {tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<true> : tensor<1x16xi1>
    %cst_0 = arith.constant dense<0> : tensor<1x16xi32>
    %cst_1 = arith.constant dense<true> : tensor<16x1xi1>
    %cst_2 = arith.constant dense<0> : tensor<16x1xi32>
    %cst_3 = arith.constant 0.000000e+00 : f32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = tt.addptr %arg12, %1 : !tt.ptr<f32, 1>, i32
    %3 = tt.load %2 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
    %4 = arith.muli %0, %arg16 : i32
    %5 = arith.muli %1, %arg17 : i32
    %6 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %7 = tt.expand_dims %6 {axis = 1 : i32} : (tensor<16xi32>) -> tensor<16x1xi32>
    %8 = tt.splat %arg7 : (i32) -> tensor<16x1xi32>
    %9 = arith.cmpi slt, %7, %8 : tensor<16x1xi32>
    %10 = tt.splat %arg11 : (i32) -> tensor<16x1xi32>
    %11 = arith.muli %7, %10 : tensor<16x1xi32>
    %12 = tt.expand_dims %6 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
    %13 = tt.splat %arg8 : (i32) -> tensor<1x16xi32>
    %14 = arith.cmpi slt, %12, %13 : tensor<1x16xi32>
    %15 = tt.broadcast %9 : (tensor<16x1xi1>) -> tensor<16x16xi1>
    %16 = tt.broadcast %14 : (tensor<1x16xi1>) -> tensor<16x16xi1>
    %17 = arith.andi %15, %16 : tensor<16x16xi1>
    %18 = tt.splat %arg4 : (i32) -> tensor<16x1xi32>
    %19 = tt.splat %arg3 : (i32) -> tensor<16x1xi32>
    %20 = tt.splat %arg5 : (i32) -> tensor<1x16xi32>
    %21 = arith.muli %1, %arg2 : i32
    %22 = tt.addptr %arg0, %21 : !tt.ptr<f32, 1>, i32
    %23 = tt.splat %22 : (!tt.ptr<f32, 1>) -> tensor<16x1x!tt.ptr<f32, 1>>
    %24 = arith.muli %1, %arg9 : i32
    %25 = tt.addptr %arg6, %24 : !tt.ptr<f32, 1>, i32
    %26 = arith.muli %1, %arg10 : i32
    %27 = tt.addptr %25, %26 : !tt.ptr<f32, 1>, i32
    %28 = tt.splat %27 : (!tt.ptr<f32, 1>) -> tensor<16x1x!tt.ptr<f32, 1>>
    %29 = tt.addptr %28, %11 : tensor<16x1x!tt.ptr<f32, 1>>, tensor<16x1xi32>
    %30 = tt.broadcast %29 : (tensor<16x1x!tt.ptr<f32, 1>>) -> tensor<16x16x!tt.ptr<f32, 1>>
    %31 = tt.broadcast %12 : (tensor<1x16xi32>) -> tensor<16x16xi32>
    %32 = tt.addptr %30, %31 : tensor<16x16x!tt.ptr<f32, 1>>, tensor<16x16xi32>
    %33 = tt.addptr %arg13, %4 : !tt.ptr<f32, 1>, i32
    %34 = tt.addptr %33, %5 : !tt.ptr<f32, 1>, i32
    scf.for %arg19 = %c0_i32 to %arg14 step %c1_i32  : i32 {
      %35 = arith.muli %arg19, %arg18 : i32
      %36 = arith.subi %arg19, %c1_i32 : i32
      %37 = tt.splat %36 : (i32) -> tensor<16xi32>
      %38 = arith.addi %37, %6 : tensor<16xi32>
      %39 = tt.expand_dims %38 {axis = 1 : i32} : (tensor<16xi32>) -> tensor<16x1xi32>
      %40 = arith.cmpi slt, %39, %cst_2 : tensor<16x1xi32>
      %41 = arith.xori %40, %cst_1 : tensor<16x1xi1>
      %42 = arith.cmpi slt, %39, %18 : tensor<16x1xi32>
      %43 = arith.andi %41, %42 : tensor<16x1xi1>
      %44 = arith.muli %39, %19 : tensor<16x1xi32>
      %45 = tt.broadcast %43 : (tensor<16x1xi1>) -> tensor<16x16xi1>
      %46 = tt.addptr %23, %44 : tensor<16x1x!tt.ptr<f32, 1>>, tensor<16x1xi32>
      %47 = tt.broadcast %46 : (tensor<16x1x!tt.ptr<f32, 1>>) -> tensor<16x16x!tt.ptr<f32, 1>>
      %48 = tt.addptr %34, %35 : !tt.ptr<f32, 1>, i32
      scf.for %arg20 = %c0_i32 to %arg15 step %c1_i32  : i32 {
        %49 = arith.subi %arg20, %c1_i32 : i32
        %50 = tt.splat %49 : (i32) -> tensor<16xi32>
        %51 = arith.addi %50, %6 : tensor<16xi32>
        %52 = tt.expand_dims %51 {axis = 0 : i32} : (tensor<16xi32>) -> tensor<1x16xi32>
        %53 = arith.cmpi slt, %52, %cst_0 : tensor<1x16xi32>
        %54 = arith.xori %53, %cst : tensor<1x16xi1>
        %55 = arith.cmpi slt, %52, %20 : tensor<1x16xi32>
        %56 = arith.andi %54, %55 : tensor<1x16xi1>
        %57 = tt.broadcast %56 : (tensor<1x16xi1>) -> tensor<16x16xi1>
        %58 = arith.andi %45, %57 : tensor<16x16xi1>
        %59 = tt.broadcast %52 : (tensor<1x16xi32>) -> tensor<16x16xi32>
        %60 = tt.addptr %47, %59 : tensor<16x16x!tt.ptr<f32, 1>>, tensor<16x16xi32>
        %61 = tt.load %60, %58 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf32>
        %62 = tt.load %32, %17 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x16xf32>
        %63 = arith.mulf %61, %62 : tensor<16x16xf32>
        %64 = tt.reshape %63 {allow_reorder = true} : tensor<16x16xf32> -> tensor<256xf32>
        %65 = "tt.reduce"(%64) <{axis = 0 : i32}> ({
        ^bb0(%arg21: f32, %arg22: f32):
          %69 = arith.addf %arg21, %arg22 : f32
          tt.reduce.return %69 : f32
        }) : (tensor<256xf32>) -> f32
        %66 = arith.addf %65, %cst_3 : f32
        %67 = tt.addptr %48, %arg20 : !tt.ptr<f32, 1>, i32
        %68 = arith.addf %66, %3 : f32
        tt.store %67, %68 {cache = 1 : i32, evict = 1 : i32} : f32
      }
    }
    tt.return
  }
}
