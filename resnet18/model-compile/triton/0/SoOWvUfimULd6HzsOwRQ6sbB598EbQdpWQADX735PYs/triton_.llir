; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 128, !dbg !14
  %21 = sext i32 %18 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %37 = bitcast i32 %33 to float, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !20
  %46 = bitcast i32 %42 to float, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = bitcast i32 %45 to float, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !31
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !33
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !34
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !34
  %88 = fadd float %37, 0x3EE4F8B580000000, !dbg !35
  %89 = fadd float %38, 0x3EE4F8B580000000, !dbg !35
  %90 = fadd float %39, 0x3EE4F8B580000000, !dbg !35
  %91 = fadd float %40, 0x3EE4F8B580000000, !dbg !35
  %92 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %93 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %94 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %95 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %96, 0, !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %97, 0, !dbg !36
  br i1 %.not.i, label %103, label %98, !dbg !36

98:                                               ; preds = %12
  br i1 %.not1.i, label %101, label %99, !dbg !36

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

103:                                              ; preds = %12
  br i1 %.not1.i, label %106, label %104, !dbg !36

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %109, 0, !dbg !36
  br i1 %.not.i1, label %115, label %110, !dbg !36

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !36

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %111, %113, %116, %118
  %.0.i3 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !36
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %120, 0, !dbg !36
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !36
  br i1 %.not.i6, label %127, label %122, !dbg !36

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !36

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !36

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !36
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %132, 0, !dbg !36
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !36
  br i1 %.not.i11, label %139, label %134, !dbg !36

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !36

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !36

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !36
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i16 = icmp eq i32 %144, 0, !dbg !36
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i19 = icmp eq i32 %145, 0, !dbg !36
  br i1 %.not.i16, label %151, label %146, !dbg !36

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !36

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

151:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %154, label %152, !dbg !36

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %147, %149, %152, %154
  %.0.i18 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i21 = icmp eq i32 %156, 0, !dbg !36
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i24 = icmp eq i32 %157, 0, !dbg !36
  br i1 %.not.i21, label %163, label %158, !dbg !36

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !36

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

163:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %166, label %164, !dbg !36

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !36
  br label %__nv_sqrtf.exit25, !dbg !36

__nv_sqrtf.exit25:                                ; preds = %159, %161, %164, %166
  %.0.i23 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i26 = icmp eq i32 %168, 0, !dbg !36
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i29 = icmp eq i32 %169, 0, !dbg !36
  br i1 %.not.i26, label %175, label %170, !dbg !36

170:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %173, label %171, !dbg !36

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

175:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %178, label %176, !dbg !36

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !36
  br label %__nv_sqrtf.exit30, !dbg !36

__nv_sqrtf.exit30:                                ; preds = %171, %173, %176, %178
  %.0.i28 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !36
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i31 = icmp eq i32 %180, 0, !dbg !36
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i34 = icmp eq i32 %181, 0, !dbg !36
  br i1 %.not.i31, label %187, label %182, !dbg !36

182:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %185, label %183, !dbg !36

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

187:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %190, label %188, !dbg !36

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !36
  br label %__nv_sqrtf.exit35, !dbg !36

__nv_sqrtf.exit35:                                ; preds = %183, %185, %188, %190
  %.0.i33 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !36
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %200 = fadd float %69, 0x3EE4F8B580000000, !dbg !38
  %201 = fadd float %70, 0x3EE4F8B580000000, !dbg !38
  %202 = fadd float %71, 0x3EE4F8B580000000, !dbg !38
  %203 = fadd float %72, 0x3EE4F8B580000000, !dbg !38
  %204 = fadd float %78, 0x3EE4F8B580000000, !dbg !38
  %205 = fadd float %79, 0x3EE4F8B580000000, !dbg !38
  %206 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %207 = fadd float %81, 0x3EE4F8B580000000, !dbg !38
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i36 = icmp eq i32 %208, 0, !dbg !39
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i39 = icmp eq i32 %209, 0, !dbg !39
  br i1 %.not.i36, label %215, label %210, !dbg !39

210:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %213, label %211, !dbg !39

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

215:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %218, label %216, !dbg !39

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #3, !dbg !39
  br label %__nv_sqrtf.exit40, !dbg !39

__nv_sqrtf.exit40:                                ; preds = %211, %213, %216, %218
  %.0.i38 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !39
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i41 = icmp eq i32 %220, 0, !dbg !39
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i44 = icmp eq i32 %221, 0, !dbg !39
  br i1 %.not.i41, label %227, label %222, !dbg !39

222:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %225, label %223, !dbg !39

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

227:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %230, label %228, !dbg !39

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #3, !dbg !39
  br label %__nv_sqrtf.exit45, !dbg !39

__nv_sqrtf.exit45:                                ; preds = %223, %225, %228, %230
  %.0.i43 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !39
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i46 = icmp eq i32 %232, 0, !dbg !39
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i49 = icmp eq i32 %233, 0, !dbg !39
  br i1 %.not.i46, label %239, label %234, !dbg !39

234:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %237, label %235, !dbg !39

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

239:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %242, label %240, !dbg !39

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #3, !dbg !39
  br label %__nv_sqrtf.exit50, !dbg !39

__nv_sqrtf.exit50:                                ; preds = %235, %237, %240, %242
  %.0.i48 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !39
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i51 = icmp eq i32 %244, 0, !dbg !39
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i54 = icmp eq i32 %245, 0, !dbg !39
  br i1 %.not.i51, label %251, label %246, !dbg !39

246:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %249, label %247, !dbg !39

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

251:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %254, label %252, !dbg !39

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #3, !dbg !39
  br label %__nv_sqrtf.exit55, !dbg !39

__nv_sqrtf.exit55:                                ; preds = %247, %249, %252, %254
  %.0.i53 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !39
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i56 = icmp eq i32 %256, 0, !dbg !39
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i59 = icmp eq i32 %257, 0, !dbg !39
  br i1 %.not.i56, label %263, label %258, !dbg !39

258:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %261, label %259, !dbg !39

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

263:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %266, label %264, !dbg !39

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !39
  br label %__nv_sqrtf.exit60, !dbg !39

__nv_sqrtf.exit60:                                ; preds = %259, %261, %264, %266
  %.0.i58 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !39
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i61 = icmp eq i32 %268, 0, !dbg !39
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i64 = icmp eq i32 %269, 0, !dbg !39
  br i1 %.not.i61, label %275, label %270, !dbg !39

270:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %273, label %271, !dbg !39

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

275:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %278, label %276, !dbg !39

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !39
  br label %__nv_sqrtf.exit65, !dbg !39

__nv_sqrtf.exit65:                                ; preds = %271, %273, %276, %278
  %.0.i63 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !39
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i66 = icmp eq i32 %280, 0, !dbg !39
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i69 = icmp eq i32 %281, 0, !dbg !39
  br i1 %.not.i66, label %287, label %282, !dbg !39

282:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %285, label %283, !dbg !39

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

287:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %290, label %288, !dbg !39

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !39
  br label %__nv_sqrtf.exit70, !dbg !39

__nv_sqrtf.exit70:                                ; preds = %283, %285, %288, %290
  %.0.i68 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !39
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i71 = icmp eq i32 %292, 0, !dbg !39
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i74 = icmp eq i32 %293, 0, !dbg !39
  br i1 %.not.i71, label %299, label %294, !dbg !39

294:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %297, label %295, !dbg !39

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

299:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %302, label %300, !dbg !39

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #3, !dbg !39
  br label %__nv_sqrtf.exit75, !dbg !39

__nv_sqrtf.exit75:                                ; preds = %295, %297, %300, %302
  %.0.i73 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !39
  %304 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %305 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %306 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %307 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %308 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %309 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %310 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %311 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %312 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %313 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %314 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %315 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %316 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %317 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %318 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %319 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %320 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %321 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %322 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !22
  %323 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %324 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %325 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %326 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !22
  %327 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %328 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %329 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %330 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !22
  %331 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %332 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %333 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %334 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !22
  %335 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %336 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %337 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %338 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !22
  %339 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %340 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %341 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %342 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !22
  %343 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %344 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %345 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %346 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !22
  %347 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %348 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %349 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %350 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !22
  %351 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %352 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !34
  %353 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !34
  %354 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !34
  %355 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !34
  %356 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %357 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %358 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %359 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %360 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %361 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %362 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %363 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %364 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !32
  %365 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !32
  %366 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !32
  %367 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !32
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !40
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !40
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !40
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !40
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !40
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !40
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !40
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !40
  %376 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !16
  %377 = insertelement <2 x i32> %376, i32 %318, i64 1, !dbg !16
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !16
  %379 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !18
  %380 = insertelement <2 x i32> %379, i32 %319, i64 1, !dbg !18
  %381 = bitcast <2 x i32> %380 to <2 x float>, !dbg !18
  %382 = fsub <2 x float> %378, %381, !dbg !41
  %383 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !24
  %384 = insertelement <2 x i32> %383, i32 %359, i64 1, !dbg !24
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !24
  %386 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !22
  %387 = insertelement <2 x i32> %386, i32 %367, i64 1, !dbg !22
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !22
  %389 = insertelement <2 x float> poison, float %192, i64 0, !dbg !42
  %390 = insertelement <2 x float> %389, float %368, i64 1, !dbg !42
  %391 = fmul <2 x float> %382, %390, !dbg !42
  %392 = fmul <2 x float> %391, %388, !dbg !43
  %393 = fadd <2 x float> %392, %385, !dbg !44
  %394 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !16
  %395 = insertelement <2 x i32> %394, i32 %316, i64 1, !dbg !16
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !16
  %397 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !18
  %398 = insertelement <2 x i32> %397, i32 %317, i64 1, !dbg !18
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !18
  %400 = fsub <2 x float> %396, %399, !dbg !41
  %401 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !24
  %402 = insertelement <2 x i32> %401, i32 %358, i64 1, !dbg !24
  %403 = bitcast <2 x i32> %402 to <2 x float>, !dbg !24
  %404 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !22
  %405 = insertelement <2 x i32> %404, i32 %366, i64 1, !dbg !22
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !22
  %407 = insertelement <2 x float> poison, float %193, i64 0, !dbg !42
  %408 = insertelement <2 x float> %407, float %369, i64 1, !dbg !42
  %409 = fmul <2 x float> %400, %408, !dbg !42
  %410 = fmul <2 x float> %409, %406, !dbg !43
  %411 = fadd <2 x float> %410, %403, !dbg !44
  %412 = insertelement <2 x i32> poison, i32 %340, i64 0, !dbg !16
  %413 = insertelement <2 x i32> %412, i32 %314, i64 1, !dbg !16
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !16
  %415 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !18
  %416 = insertelement <2 x i32> %415, i32 %315, i64 1, !dbg !18
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !18
  %418 = fsub <2 x float> %414, %417, !dbg !41
  %419 = insertelement <2 x i32> poison, i32 %343, i64 0, !dbg !24
  %420 = insertelement <2 x i32> %419, i32 %357, i64 1, !dbg !24
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !24
  %422 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !22
  %423 = insertelement <2 x i32> %422, i32 %365, i64 1, !dbg !22
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !22
  %425 = insertelement <2 x float> poison, float %194, i64 0, !dbg !42
  %426 = insertelement <2 x float> %425, float %370, i64 1, !dbg !42
  %427 = fmul <2 x float> %418, %426, !dbg !42
  %428 = fmul <2 x float> %427, %424, !dbg !43
  %429 = fadd <2 x float> %428, %421, !dbg !44
  %430 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !16
  %431 = insertelement <2 x i32> %430, i32 %312, i64 1, !dbg !16
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !16
  %433 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !18
  %434 = insertelement <2 x i32> %433, i32 %313, i64 1, !dbg !18
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !18
  %436 = fsub <2 x float> %432, %435, !dbg !41
  %437 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !24
  %438 = insertelement <2 x i32> %437, i32 %356, i64 1, !dbg !24
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !24
  %440 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !22
  %441 = insertelement <2 x i32> %440, i32 %364, i64 1, !dbg !22
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !22
  %443 = insertelement <2 x float> poison, float %195, i64 0, !dbg !42
  %444 = insertelement <2 x float> %443, float %371, i64 1, !dbg !42
  %445 = fmul <2 x float> %436, %444, !dbg !42
  %446 = fmul <2 x float> %445, %442, !dbg !43
  %447 = fadd <2 x float> %446, %439, !dbg !44
  %448 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !16
  %449 = insertelement <2 x i32> %448, i32 %310, i64 1, !dbg !16
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !16
  %451 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !18
  %452 = insertelement <2 x i32> %451, i32 %311, i64 1, !dbg !18
  %453 = bitcast <2 x i32> %452 to <2 x float>, !dbg !18
  %454 = fsub <2 x float> %450, %453, !dbg !41
  %455 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !24
  %456 = insertelement <2 x i32> %455, i32 %355, i64 1, !dbg !24
  %457 = bitcast <2 x i32> %456 to <2 x float>, !dbg !24
  %458 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !22
  %459 = insertelement <2 x i32> %458, i32 %363, i64 1, !dbg !22
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !22
  %461 = insertelement <2 x float> poison, float %196, i64 0, !dbg !42
  %462 = insertelement <2 x float> %461, float %372, i64 1, !dbg !42
  %463 = fmul <2 x float> %454, %462, !dbg !42
  %464 = fmul <2 x float> %463, %460, !dbg !43
  %465 = fadd <2 x float> %464, %457, !dbg !44
  %466 = insertelement <2 x i32> poison, i32 %328, i64 0, !dbg !16
  %467 = insertelement <2 x i32> %466, i32 %308, i64 1, !dbg !16
  %468 = bitcast <2 x i32> %467 to <2 x float>, !dbg !16
  %469 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !18
  %470 = insertelement <2 x i32> %469, i32 %309, i64 1, !dbg !18
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !18
  %472 = fsub <2 x float> %468, %471, !dbg !41
  %473 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !24
  %474 = insertelement <2 x i32> %473, i32 %354, i64 1, !dbg !24
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !24
  %476 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !22
  %477 = insertelement <2 x i32> %476, i32 %362, i64 1, !dbg !22
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !22
  %479 = insertelement <2 x float> poison, float %197, i64 0, !dbg !42
  %480 = insertelement <2 x float> %479, float %373, i64 1, !dbg !42
  %481 = fmul <2 x float> %472, %480, !dbg !42
  %482 = fmul <2 x float> %481, %478, !dbg !43
  %483 = fadd <2 x float> %482, %475, !dbg !44
  %484 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !16
  %485 = insertelement <2 x i32> %484, i32 %306, i64 1, !dbg !16
  %486 = bitcast <2 x i32> %485 to <2 x float>, !dbg !16
  %487 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !18
  %488 = insertelement <2 x i32> %487, i32 %307, i64 1, !dbg !18
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !18
  %490 = fsub <2 x float> %486, %489, !dbg !41
  %491 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !24
  %492 = insertelement <2 x i32> %491, i32 %353, i64 1, !dbg !24
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !24
  %494 = insertelement <2 x i32> poison, i32 %326, i64 0, !dbg !22
  %495 = insertelement <2 x i32> %494, i32 %361, i64 1, !dbg !22
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !22
  %497 = insertelement <2 x float> poison, float %198, i64 0, !dbg !42
  %498 = insertelement <2 x float> %497, float %374, i64 1, !dbg !42
  %499 = fmul <2 x float> %490, %498, !dbg !42
  %500 = fmul <2 x float> %499, %496, !dbg !43
  %501 = fadd <2 x float> %500, %493, !dbg !44
  %502 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !16
  %503 = insertelement <2 x i32> %502, i32 %304, i64 1, !dbg !16
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !16
  %505 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !18
  %506 = insertelement <2 x i32> %505, i32 %305, i64 1, !dbg !18
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !18
  %508 = fsub <2 x float> %504, %507, !dbg !41
  %509 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !24
  %510 = insertelement <2 x i32> %509, i32 %352, i64 1, !dbg !24
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !24
  %512 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !22
  %513 = insertelement <2 x i32> %512, i32 %360, i64 1, !dbg !22
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !22
  %515 = insertelement <2 x float> poison, float %199, i64 0, !dbg !42
  %516 = insertelement <2 x float> %515, float %375, i64 1, !dbg !42
  %517 = fmul <2 x float> %508, %516, !dbg !42
  %518 = fmul <2 x float> %517, %514, !dbg !43
  %519 = fadd <2 x float> %518, %511, !dbg !44
  %shift = shufflevector <2 x float> %393, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %520 = fadd <2 x float> %393, %shift, !dbg !45
  %521 = extractelement <2 x float> %520, i64 0, !dbg !45
  %shift76 = shufflevector <2 x float> %411, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %522 = fadd <2 x float> %411, %shift76, !dbg !45
  %523 = extractelement <2 x float> %522, i64 0, !dbg !45
  %shift77 = shufflevector <2 x float> %429, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %524 = fadd <2 x float> %429, %shift77, !dbg !45
  %525 = extractelement <2 x float> %524, i64 0, !dbg !45
  %shift78 = shufflevector <2 x float> %447, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %526 = fadd <2 x float> %447, %shift78, !dbg !45
  %527 = extractelement <2 x float> %526, i64 0, !dbg !45
  %shift79 = shufflevector <2 x float> %465, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %528 = fadd <2 x float> %465, %shift79, !dbg !45
  %529 = extractelement <2 x float> %528, i64 0, !dbg !45
  %shift80 = shufflevector <2 x float> %483, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %530 = fadd <2 x float> %483, %shift80, !dbg !45
  %531 = extractelement <2 x float> %530, i64 0, !dbg !45
  %shift81 = shufflevector <2 x float> %501, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %532 = fadd <2 x float> %501, %shift81, !dbg !45
  %533 = extractelement <2 x float> %532, i64 0, !dbg !45
  %shift82 = shufflevector <2 x float> %519, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %534 = fadd <2 x float> %519, %shift82, !dbg !45
  %535 = extractelement <2 x float> %534, i64 0, !dbg !45
  %536 = fcmp olt float %521, 0.000000e+00, !dbg !46
  %537 = fcmp olt float %523, 0.000000e+00, !dbg !46
  %538 = fcmp olt float %525, 0.000000e+00, !dbg !46
  %539 = fcmp olt float %527, 0.000000e+00, !dbg !46
  %540 = fcmp olt float %529, 0.000000e+00, !dbg !46
  %541 = fcmp olt float %531, 0.000000e+00, !dbg !46
  %542 = fcmp olt float %533, 0.000000e+00, !dbg !46
  %543 = fcmp olt float %535, 0.000000e+00, !dbg !46
  %544 = select i1 %536, float 0.000000e+00, float %521, !dbg !50
  %545 = select i1 %537, float 0.000000e+00, float %523, !dbg !50
  %546 = select i1 %538, float 0.000000e+00, float %525, !dbg !50
  %547 = select i1 %539, float 0.000000e+00, float %527, !dbg !50
  %548 = select i1 %540, float 0.000000e+00, float %529, !dbg !50
  %549 = select i1 %541, float 0.000000e+00, float %531, !dbg !50
  %550 = select i1 %542, float 0.000000e+00, float %533, !dbg !50
  %551 = select i1 %543, float 0.000000e+00, float %535, !dbg !50
  %552 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !51
  %553 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !51
  %554 = bitcast float %544 to i32, !dbg !52
  %555 = bitcast float %545 to i32, !dbg !52
  %556 = bitcast float %546 to i32, !dbg !52
  %557 = bitcast float %547 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %554, i32 %555, i32 %556, i32 %557, ptr addrspace(1) %552, i1 true) #3, !dbg !52
  %558 = bitcast float %548 to i32, !dbg !52
  %559 = bitcast float %549 to i32, !dbg !52
  %560 = bitcast float %550 to i32, !dbg !52
  %561 = bitcast float %551 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %558, i32 %559, i32 %560, i32 %561, ptr addrspace(1) %553, i1 true) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnzlg4yh6lz6xfjczzefc5o3bzqh5idczmavrawit3rsriaxoqw3.py", directory: "/tmp/torchinductor_meng/nz")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 18, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 31, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 26, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 27, scope: !7)
!40 = !DILocation(line: 49, column: 19, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 68, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 56, column: 42, scope: !7)
!50 = !DILocation(line: 71, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 57, column: 28, scope: !7)
!52 = !DILocation(line: 57, column: 40, scope: !7)
!53 = !DILocation(line: 57, column: 4, scope: !7)
