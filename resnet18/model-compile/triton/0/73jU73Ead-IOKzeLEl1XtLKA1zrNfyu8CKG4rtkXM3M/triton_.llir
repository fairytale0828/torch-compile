; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 50176, !dbg !14
  %16 = srem i32 %14, 256, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %15) #3, !dbg !17
  %20 = sext i32 %16 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %15) #3, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %15) #3, !dbg !21
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %15) #3, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %15) #3, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %15) #3, !dbg !27
  %35 = fadd float %27, 0x3EE4F8B580000000, !dbg !28
  %36 = fadd float %28, 0x3EE4F8B580000000, !dbg !28
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %37, 0, !dbg !29
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %38, 0, !dbg !29
  br i1 %.not.i, label %44, label %39, !dbg !29

39:                                               ; preds = %8
  br i1 %.not1.i, label %42, label %40, !dbg !29

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

44:                                               ; preds = %8
  br i1 %.not1.i, label %47, label %45, !dbg !29

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %40, %42, %45, %47
  %.0.i = phi float [ %41, %40 ], [ %43, %42 ], [ %46, %45 ], [ %48, %47 ], !dbg !29
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %49, 0, !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %50, 0, !dbg !29
  br i1 %.not.i1, label %56, label %51, !dbg !29

51:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %54, label %52, !dbg !29

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %59, label %57, !dbg !29

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %52, %54, %57, %59
  %.0.i3 = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !29
  %61 = extractvalue { i32, i32 } %19, 1, !dbg !17
  %62 = bitcast i32 %61 to float, !dbg !17
  %63 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %64 = bitcast i32 %63 to float, !dbg !19
  %65 = fsub float %62, %64, !dbg !30
  %66 = extractvalue { i32, i32 } %19, 0, !dbg !17
  %67 = bitcast i32 %66 to float, !dbg !17
  %68 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %69 = bitcast i32 %68 to float, !dbg !19
  %70 = fsub float %67, %69, !dbg !30
  %71 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %72 = bitcast i32 %71 to float, !dbg !27
  %73 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %74 = bitcast i32 %73 to float, !dbg !27
  %75 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = extractvalue { i32, i32 } %30, 1, !dbg !23
  %80 = bitcast i32 %79 to float, !dbg !23
  %81 = extractvalue { i32, i32 } %30, 0, !dbg !23
  %82 = bitcast i32 %81 to float, !dbg !23
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %85 = fmul float %70, %83, !dbg !32
  %86 = fmul float %65, %84, !dbg !32
  %87 = fmul float %85, %82, !dbg !33
  %88 = fmul float %86, %80, !dbg !33
  %89 = fadd float %87, %78, !dbg !34
  %90 = fadd float %88, %76, !dbg !34
  %91 = fadd float %89, %74, !dbg !35
  %92 = fadd float %90, %72, !dbg !35
  %93 = fcmp olt float %91, 0.000000e+00, !dbg !36
  %94 = fcmp olt float %92, 0.000000e+00, !dbg !36
  %95 = select i1 %93, float 0.000000e+00, float %91, !dbg !40
  %96 = select i1 %94, float 0.000000e+00, float %92, !dbg !40
  %97 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !41
  %98 = bitcast float %95 to i32, !dbg !42
  %99 = bitcast float %96 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %98, i32 %99, ptr addrspace(1) %97, i1 %15) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2rbiu3y4pbn4lv3hopbtfbfspgegkjh7t7yxft36woynsrvgksn.py", directory: "/tmp/torchinductor_meng/2r")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 18, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 31, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 36, scope: !7)
!26 = !DILocation(line: 30, column: 31, scope: !7)
!27 = !DILocation(line: 30, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 26, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 68, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 44, column: 42, scope: !7)
!40 = !DILocation(line: 71, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 37, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
