; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = sdiv i32 %13, 3584, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %18 = sdiv i32 %.frozen, 64, !dbg !15
  %19 = srem i32 %18, 56, !dbg !16
  %20 = mul i32 %18, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = srem i32 %14, 64, !dbg !17
  %22 = shl nsw i32 %17, 1, !dbg !18
  %23 = add i32 %13, -3584, !dbg !19
  %24 = icmp ult i32 %23, 200704, !dbg !19
  %25 = icmp sgt i32 %19, 0, !dbg !20
  %26 = and i1 %24, %25, !dbg !21
  %27 = shl nsw i32 %19, 7, !dbg !22
  %28 = mul i32 %17, 14336, !dbg !23
  %29 = add i32 %27, %28, !dbg !24
  %30 = add i32 %29, -7232, !dbg !25
  %31 = add nsw i32 %30, %.decomposed, !dbg !26
  %32 = add nsw i32 %30, %21, !dbg !26
  %33 = sext i32 %31 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !27
  %35 = sext i32 %32 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !27
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %26) #2, !dbg !28
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !28
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !28
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !28
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %26) #2, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %47 = icmp sgt i32 %19, -1, !dbg !29
  %48 = and i1 %24, %47, !dbg !30
  %49 = add i32 %29, -7168, !dbg !31
  %50 = add i32 %49, %.decomposed, !dbg !32
  %51 = add i32 %49, %21, !dbg !32
  %52 = sext i32 %50 to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !33
  %54 = sext i32 %51 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !33
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %53, i1 %48) #2, !dbg !34
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !34
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !34
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %48) #2, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !34
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !34
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !34
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !34
  %66 = add i32 %29, -7104, !dbg !35
  %67 = add nsw i32 %66, %.decomposed, !dbg !36
  %68 = add nsw i32 %66, %21, !dbg !36
  %69 = sext i32 %67 to i64, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !37
  %71 = sext i32 %68 to i64, !dbg !37
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !37
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %70, i1 %48) #2, !dbg !38
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !38
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !38
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !38
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !38
  %78 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !38
  %79 = insertelement <4 x i32> %78, i32 %75, i64 1, !dbg !38
  %80 = insertelement <4 x i32> %79, i32 %76, i64 2, !dbg !38
  %81 = insertelement <4 x i32> %80, i32 %77, i64 3, !dbg !38
  %82 = bitcast <4 x i32> %81 to <4 x float>, !dbg !38
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %72, i1 %48) #2, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !38
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !38
  %88 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !38
  %89 = insertelement <4 x i32> %88, i32 %85, i64 1, !dbg !38
  %90 = insertelement <4 x i32> %89, i32 %86, i64 2, !dbg !38
  %91 = insertelement <4 x i32> %90, i32 %87, i64 3, !dbg !38
  %92 = bitcast <4 x i32> %91 to <4 x float>, !dbg !38
  %93 = add i32 %13, 3583, !dbg !39
  %94 = icmp ult i32 %93, 204287, !dbg !39
  %95 = and i1 %94, %25, !dbg !40
  %96 = add i32 %29, -64, !dbg !41
  %97 = add nsw i32 %96, %.decomposed, !dbg !42
  %98 = add nsw i32 %96, %21, !dbg !42
  %99 = sext i32 %97 to i64, !dbg !43
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !43
  %101 = sext i32 %98 to i64, !dbg !43
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !43
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %100, i1 %95) #2, !dbg !44
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !44
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !44
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !44
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !44
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %102, i1 %95) #2, !dbg !44
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !44
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !44
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !44
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !44
  %113 = and i1 %94, %47, !dbg !45
  %114 = add i32 %29, %.decomposed, !dbg !46
  %115 = add i32 %29, %21, !dbg !46
  %116 = sext i32 %114 to i64, !dbg !47
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !47
  %118 = sext i32 %115 to i64, !dbg !47
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !47
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %117, i1 %113) #2, !dbg !48
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !48
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !48
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !48
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !48
  %125 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !48
  %126 = insertelement <4 x i32> %125, i32 %122, i64 1, !dbg !48
  %127 = insertelement <4 x i32> %126, i32 %123, i64 2, !dbg !48
  %128 = insertelement <4 x i32> %127, i32 %124, i64 3, !dbg !48
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !48
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %119, i1 %113) #2, !dbg !48
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !48
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !48
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !48
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !48
  %135 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !48
  %136 = insertelement <4 x i32> %135, i32 %132, i64 1, !dbg !48
  %137 = insertelement <4 x i32> %136, i32 %133, i64 2, !dbg !48
  %138 = insertelement <4 x i32> %137, i32 %134, i64 3, !dbg !48
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !48
  %140 = or disjoint i32 %29, 64, !dbg !49
  %141 = add nsw i32 %140, %.decomposed, !dbg !50
  %142 = add nsw i32 %140, %21, !dbg !50
  %143 = sext i32 %141 to i64, !dbg !51
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !51
  %145 = sext i32 %142 to i64, !dbg !51
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !51
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %144, i1 %113) #2, !dbg !52
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !52
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !52
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !52
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !52
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %146, i1 %113) #2, !dbg !52
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !52
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !52
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !52
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !52
  %157 = or disjoint i32 %22, 1, !dbg !53
  %158 = icmp sgt i32 %13, -3584, !dbg !54
  %159 = icmp slt i32 %157, 112, !dbg !55
  %160 = and i1 %158, %159, !dbg !56
  %161 = and i1 %25, %160, !dbg !57
  %162 = add i32 %29, 7104, !dbg !58
  %163 = add nsw i32 %162, %.decomposed, !dbg !59
  %164 = add nsw i32 %162, %21, !dbg !59
  %165 = sext i32 %163 to i64, !dbg !60
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !60
  %167 = sext i32 %164 to i64, !dbg !60
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !60
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %166, i1 %161) #2, !dbg !61
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !61
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !61
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !61
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !61
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %168, i1 %161) #2, !dbg !61
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !61
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !61
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !61
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !61
  %179 = and i1 %47, %160, !dbg !62
  %180 = add i32 %29, 7168, !dbg !63
  %181 = add i32 %180, %.decomposed, !dbg !64
  %182 = add i32 %180, %21, !dbg !64
  %183 = sext i32 %181 to i64, !dbg !65
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !65
  %185 = sext i32 %182 to i64, !dbg !65
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !65
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %179) #2, !dbg !66
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !66
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !66
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !66
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !66
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %186, i1 %179) #2, !dbg !66
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !66
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !66
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !66
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !66
  %197 = add i32 %29, 7232, !dbg !67
  %198 = add nsw i32 %197, %.decomposed, !dbg !68
  %199 = add nsw i32 %197, %21, !dbg !68
  %200 = sext i32 %198 to i64, !dbg !69
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !69
  %202 = sext i32 %199 to i64, !dbg !69
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !69
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %201, i1 %179) #2, !dbg !70
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !70
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !70
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !70
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !70
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %203, i1 %179) #2, !dbg !70
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !70
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !70
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !70
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !70
  %214 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !28
  %215 = insertelement <4 x i32> %214, i32 %39, i64 1, !dbg !28
  %216 = insertelement <4 x i32> %215, i32 %40, i64 2, !dbg !28
  %217 = insertelement <4 x i32> %216, i32 %41, i64 3, !dbg !28
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !28
  %219 = insertelement <4 x i1> poison, i1 %26, i64 0, !dbg !71
  %220 = shufflevector <4 x i1> %219, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !71
  %221 = select <4 x i1> %220, <4 x float> %218, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !71
  %222 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !34
  %223 = insertelement <4 x i32> %222, i32 %58, i64 1, !dbg !34
  %224 = insertelement <4 x i32> %223, i32 %59, i64 2, !dbg !34
  %225 = insertelement <4 x i32> %224, i32 %60, i64 3, !dbg !34
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !34
  %227 = insertelement <4 x i1> poison, i1 %48, i64 0, !dbg !72
  %228 = shufflevector <4 x i1> %227, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !72
  %229 = select <4 x i1> %228, <4 x float> %226, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !72
  %230 = fcmp ogt <4 x float> %229, %221, !dbg !73
  %231 = fcmp uno <4 x float> %229, zeroinitializer, !dbg !77
  %232 = or <4 x i1> %230, %231, !dbg !78
  %233 = select <4 x i1> %232, <4 x float> %229, <4 x float> %221, !dbg !79
  %234 = select <4 x i1> %228, <4 x float> %82, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !80
  %235 = fcmp ogt <4 x float> %234, %233, !dbg !81
  %236 = fcmp uno <4 x float> %234, zeroinitializer, !dbg !83
  %237 = or <4 x i1> %236, %235, !dbg !84
  %238 = select <4 x i1> %237, <4 x float> %234, <4 x float> %233, !dbg !85
  %239 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !44
  %240 = insertelement <4 x i32> %239, i32 %105, i64 1, !dbg !44
  %241 = insertelement <4 x i32> %240, i32 %106, i64 2, !dbg !44
  %242 = insertelement <4 x i32> %241, i32 %107, i64 3, !dbg !44
  %243 = bitcast <4 x i32> %242 to <4 x float>, !dbg !44
  %244 = insertelement <4 x i1> poison, i1 %95, i64 0, !dbg !86
  %245 = shufflevector <4 x i1> %244, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !86
  %246 = select <4 x i1> %245, <4 x float> %243, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !86
  %247 = fcmp ogt <4 x float> %246, %238, !dbg !87
  %248 = fcmp uno <4 x float> %246, zeroinitializer, !dbg !89
  %249 = or <4 x i1> %248, %247, !dbg !90
  %250 = select <4 x i1> %249, <4 x float> %246, <4 x float> %238, !dbg !91
  %251 = insertelement <4 x i1> poison, i1 %113, i64 0, !dbg !92
  %252 = shufflevector <4 x i1> %251, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !92
  %253 = select <4 x i1> %252, <4 x float> %129, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !92
  %254 = fcmp ogt <4 x float> %253, %250, !dbg !93
  %255 = fcmp uno <4 x float> %253, zeroinitializer, !dbg !95
  %256 = or <4 x i1> %255, %254, !dbg !96
  %257 = select <4 x i1> %256, <4 x float> %253, <4 x float> %250, !dbg !97
  %258 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !52
  %259 = insertelement <4 x i32> %258, i32 %149, i64 1, !dbg !52
  %260 = insertelement <4 x i32> %259, i32 %150, i64 2, !dbg !52
  %261 = insertelement <4 x i32> %260, i32 %151, i64 3, !dbg !52
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !52
  %263 = select <4 x i1> %252, <4 x float> %262, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !98
  %264 = fcmp ogt <4 x float> %263, %257, !dbg !99
  %265 = fcmp uno <4 x float> %263, zeroinitializer, !dbg !101
  %266 = or <4 x i1> %265, %264, !dbg !102
  %267 = select <4 x i1> %266, <4 x float> %263, <4 x float> %257, !dbg !103
  %268 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !61
  %269 = insertelement <4 x i32> %268, i32 %171, i64 1, !dbg !61
  %270 = insertelement <4 x i32> %269, i32 %172, i64 2, !dbg !61
  %271 = insertelement <4 x i32> %270, i32 %173, i64 3, !dbg !61
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !61
  %273 = insertelement <4 x i1> poison, i1 %161, i64 0, !dbg !104
  %274 = shufflevector <4 x i1> %273, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !104
  %275 = select <4 x i1> %274, <4 x float> %272, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !104
  %276 = fcmp ogt <4 x float> %275, %267, !dbg !105
  %277 = fcmp uno <4 x float> %275, zeroinitializer, !dbg !107
  %278 = or <4 x i1> %277, %276, !dbg !108
  %279 = select <4 x i1> %278, <4 x float> %275, <4 x float> %267, !dbg !109
  %280 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !66
  %281 = insertelement <4 x i32> %280, i32 %189, i64 1, !dbg !66
  %282 = insertelement <4 x i32> %281, i32 %190, i64 2, !dbg !66
  %283 = insertelement <4 x i32> %282, i32 %191, i64 3, !dbg !66
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !66
  %285 = insertelement <4 x i1> poison, i1 %179, i64 0, !dbg !110
  %286 = shufflevector <4 x i1> %285, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !110
  %287 = select <4 x i1> %286, <4 x float> %284, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !110
  %288 = fcmp ogt <4 x float> %287, %279, !dbg !111
  %289 = fcmp uno <4 x float> %287, zeroinitializer, !dbg !113
  %290 = or <4 x i1> %289, %288, !dbg !114
  %291 = select <4 x i1> %290, <4 x float> %287, <4 x float> %279, !dbg !115
  %292 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !70
  %293 = insertelement <4 x i32> %292, i32 %206, i64 1, !dbg !70
  %294 = insertelement <4 x i32> %293, i32 %207, i64 2, !dbg !70
  %295 = insertelement <4 x i32> %294, i32 %208, i64 3, !dbg !70
  %296 = bitcast <4 x i32> %295 to <4 x float>, !dbg !70
  %297 = select <4 x i1> %286, <4 x float> %296, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !116
  %298 = fcmp ogt <4 x float> %297, %291, !dbg !117
  %299 = extractelement <4 x float> %297, i64 0, !dbg !119
  %300 = fcmp uno float %299, 0.000000e+00, !dbg !120
  %301 = extractelement <4 x float> %297, i64 1, !dbg !119
  %302 = fcmp uno float %301, 0.000000e+00, !dbg !120
  %303 = extractelement <4 x float> %297, i64 2, !dbg !119
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !120
  %305 = extractelement <4 x float> %297, i64 3, !dbg !119
  %306 = fcmp uno float %305, 0.000000e+00, !dbg !120
  %307 = extractelement <4 x i1> %298, i64 0, !dbg !121
  %308 = or i1 %300, %307, !dbg !121
  %309 = extractelement <4 x i1> %298, i64 1, !dbg !121
  %310 = or i1 %302, %309, !dbg !121
  %311 = extractelement <4 x i1> %298, i64 2, !dbg !121
  %312 = or i1 %304, %311, !dbg !121
  %313 = extractelement <4 x i1> %298, i64 3, !dbg !121
  %314 = or i1 %306, %313, !dbg !121
  %315 = extractelement <4 x float> %291, i64 0, !dbg !119
  %316 = select i1 %308, float %299, float %315, !dbg !119
  %317 = extractelement <4 x float> %291, i64 1, !dbg !119
  %318 = select i1 %310, float %301, float %317, !dbg !119
  %319 = extractelement <4 x float> %291, i64 2, !dbg !119
  %320 = select i1 %312, float %303, float %319, !dbg !119
  %321 = extractelement <4 x float> %291, i64 3, !dbg !119
  %322 = select i1 %314, float %305, float %321, !dbg !119
  %323 = zext <4 x i1> %230 to <4 x i8>, !dbg !122
  %324 = select <4 x i1> %235, <4 x i8> <i8 2, i8 2, i8 2, i8 2>, <4 x i8> %323, !dbg !123
  %325 = select <4 x i1> %247, <4 x i8> <i8 3, i8 3, i8 3, i8 3>, <4 x i8> %324, !dbg !124
  %326 = select <4 x i1> %254, <4 x i8> <i8 4, i8 4, i8 4, i8 4>, <4 x i8> %325, !dbg !125
  %327 = select <4 x i1> %264, <4 x i8> <i8 5, i8 5, i8 5, i8 5>, <4 x i8> %326, !dbg !126
  %328 = select <4 x i1> %276, <4 x i8> <i8 6, i8 6, i8 6, i8 6>, <4 x i8> %327, !dbg !127
  %329 = select <4 x i1> %288, <4 x i8> <i8 7, i8 7, i8 7, i8 7>, <4 x i8> %328, !dbg !128
  %330 = select <4 x i1> %298, <4 x i8> <i8 8, i8 8, i8 8, i8 8>, <4 x i8> %329, !dbg !129
  %331 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !28
  %332 = insertelement <4 x i32> %331, i32 %44, i64 1, !dbg !28
  %333 = insertelement <4 x i32> %332, i32 %45, i64 2, !dbg !28
  %334 = insertelement <4 x i32> %333, i32 %46, i64 3, !dbg !28
  %335 = bitcast <4 x i32> %334 to <4 x float>, !dbg !28
  %336 = select <4 x i1> %220, <4 x float> %335, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !71
  %337 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !34
  %338 = insertelement <4 x i32> %337, i32 %63, i64 1, !dbg !34
  %339 = insertelement <4 x i32> %338, i32 %64, i64 2, !dbg !34
  %340 = insertelement <4 x i32> %339, i32 %65, i64 3, !dbg !34
  %341 = bitcast <4 x i32> %340 to <4 x float>, !dbg !34
  %342 = select <4 x i1> %228, <4 x float> %341, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !72
  %343 = fcmp ogt <4 x float> %342, %336, !dbg !73
  %344 = fcmp uno <4 x float> %342, zeroinitializer, !dbg !77
  %345 = or <4 x i1> %343, %344, !dbg !78
  %346 = select <4 x i1> %345, <4 x float> %342, <4 x float> %336, !dbg !79
  %347 = select <4 x i1> %228, <4 x float> %92, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !80
  %348 = fcmp ogt <4 x float> %347, %346, !dbg !81
  %349 = fcmp uno <4 x float> %347, zeroinitializer, !dbg !83
  %350 = or <4 x i1> %349, %348, !dbg !84
  %351 = select <4 x i1> %350, <4 x float> %347, <4 x float> %346, !dbg !85
  %352 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !44
  %353 = insertelement <4 x i32> %352, i32 %110, i64 1, !dbg !44
  %354 = insertelement <4 x i32> %353, i32 %111, i64 2, !dbg !44
  %355 = insertelement <4 x i32> %354, i32 %112, i64 3, !dbg !44
  %356 = bitcast <4 x i32> %355 to <4 x float>, !dbg !44
  %357 = select <4 x i1> %245, <4 x float> %356, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !86
  %358 = fcmp ogt <4 x float> %357, %351, !dbg !87
  %359 = fcmp uno <4 x float> %357, zeroinitializer, !dbg !89
  %360 = or <4 x i1> %359, %358, !dbg !90
  %361 = select <4 x i1> %360, <4 x float> %357, <4 x float> %351, !dbg !91
  %362 = select <4 x i1> %252, <4 x float> %139, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !92
  %363 = fcmp ogt <4 x float> %362, %361, !dbg !93
  %364 = fcmp uno <4 x float> %362, zeroinitializer, !dbg !95
  %365 = or <4 x i1> %364, %363, !dbg !96
  %366 = select <4 x i1> %365, <4 x float> %362, <4 x float> %361, !dbg !97
  %367 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !52
  %368 = insertelement <4 x i32> %367, i32 %154, i64 1, !dbg !52
  %369 = insertelement <4 x i32> %368, i32 %155, i64 2, !dbg !52
  %370 = insertelement <4 x i32> %369, i32 %156, i64 3, !dbg !52
  %371 = bitcast <4 x i32> %370 to <4 x float>, !dbg !52
  %372 = select <4 x i1> %252, <4 x float> %371, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !98
  %373 = fcmp ogt <4 x float> %372, %366, !dbg !99
  %374 = fcmp uno <4 x float> %372, zeroinitializer, !dbg !101
  %375 = or <4 x i1> %374, %373, !dbg !102
  %376 = select <4 x i1> %375, <4 x float> %372, <4 x float> %366, !dbg !103
  %377 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !61
  %378 = insertelement <4 x i32> %377, i32 %176, i64 1, !dbg !61
  %379 = insertelement <4 x i32> %378, i32 %177, i64 2, !dbg !61
  %380 = insertelement <4 x i32> %379, i32 %178, i64 3, !dbg !61
  %381 = bitcast <4 x i32> %380 to <4 x float>, !dbg !61
  %382 = select <4 x i1> %274, <4 x float> %381, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !104
  %383 = fcmp ogt <4 x float> %382, %376, !dbg !105
  %384 = fcmp uno <4 x float> %382, zeroinitializer, !dbg !107
  %385 = or <4 x i1> %384, %383, !dbg !108
  %386 = select <4 x i1> %385, <4 x float> %382, <4 x float> %376, !dbg !109
  %387 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !66
  %388 = insertelement <4 x i32> %387, i32 %194, i64 1, !dbg !66
  %389 = insertelement <4 x i32> %388, i32 %195, i64 2, !dbg !66
  %390 = insertelement <4 x i32> %389, i32 %196, i64 3, !dbg !66
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !66
  %392 = select <4 x i1> %286, <4 x float> %391, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !110
  %393 = fcmp ogt <4 x float> %392, %386, !dbg !111
  %394 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !113
  %395 = or <4 x i1> %394, %393, !dbg !114
  %396 = select <4 x i1> %395, <4 x float> %392, <4 x float> %386, !dbg !115
  %397 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !70
  %398 = insertelement <4 x i32> %397, i32 %211, i64 1, !dbg !70
  %399 = insertelement <4 x i32> %398, i32 %212, i64 2, !dbg !70
  %400 = insertelement <4 x i32> %399, i32 %213, i64 3, !dbg !70
  %401 = bitcast <4 x i32> %400 to <4 x float>, !dbg !70
  %402 = select <4 x i1> %286, <4 x float> %401, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !116
  %403 = fcmp ogt <4 x float> %402, %396, !dbg !117
  %404 = extractelement <4 x float> %402, i64 0, !dbg !119
  %405 = fcmp uno float %404, 0.000000e+00, !dbg !120
  %406 = extractelement <4 x float> %402, i64 1, !dbg !119
  %407 = fcmp uno float %406, 0.000000e+00, !dbg !120
  %408 = extractelement <4 x float> %402, i64 2, !dbg !119
  %409 = fcmp uno float %408, 0.000000e+00, !dbg !120
  %410 = extractelement <4 x float> %402, i64 3, !dbg !119
  %411 = fcmp uno float %410, 0.000000e+00, !dbg !120
  %412 = extractelement <4 x i1> %403, i64 0, !dbg !121
  %413 = or i1 %405, %412, !dbg !121
  %414 = extractelement <4 x i1> %403, i64 1, !dbg !121
  %415 = or i1 %407, %414, !dbg !121
  %416 = extractelement <4 x i1> %403, i64 2, !dbg !121
  %417 = or i1 %409, %416, !dbg !121
  %418 = extractelement <4 x i1> %403, i64 3, !dbg !121
  %419 = or i1 %411, %418, !dbg !121
  %420 = extractelement <4 x float> %396, i64 0, !dbg !119
  %421 = select i1 %413, float %404, float %420, !dbg !119
  %422 = extractelement <4 x float> %396, i64 1, !dbg !119
  %423 = select i1 %415, float %406, float %422, !dbg !119
  %424 = extractelement <4 x float> %396, i64 2, !dbg !119
  %425 = select i1 %417, float %408, float %424, !dbg !119
  %426 = extractelement <4 x float> %396, i64 3, !dbg !119
  %427 = select i1 %419, float %410, float %426, !dbg !119
  %428 = zext <4 x i1> %343 to <4 x i8>, !dbg !122
  %429 = select <4 x i1> %348, <4 x i8> <i8 2, i8 2, i8 2, i8 2>, <4 x i8> %428, !dbg !123
  %430 = select <4 x i1> %358, <4 x i8> <i8 3, i8 3, i8 3, i8 3>, <4 x i8> %429, !dbg !124
  %431 = select <4 x i1> %363, <4 x i8> <i8 4, i8 4, i8 4, i8 4>, <4 x i8> %430, !dbg !125
  %432 = select <4 x i1> %373, <4 x i8> <i8 5, i8 5, i8 5, i8 5>, <4 x i8> %431, !dbg !126
  %433 = select <4 x i1> %383, <4 x i8> <i8 6, i8 6, i8 6, i8 6>, <4 x i8> %432, !dbg !127
  %434 = select <4 x i1> %393, <4 x i8> <i8 7, i8 7, i8 7, i8 7>, <4 x i8> %433, !dbg !128
  %435 = select <4 x i1> %403, <4 x i8> <i8 8, i8 8, i8 8, i8 8>, <4 x i8> %434, !dbg !129
  %436 = sext i32 %15 to i64, !dbg !130
  %437 = getelementptr float, ptr addrspace(1) %1, i64 %436, !dbg !130
  %438 = sext i32 %16 to i64, !dbg !130
  %439 = getelementptr float, ptr addrspace(1) %1, i64 %438, !dbg !130
  %440 = zext nneg i32 %9 to i64, !dbg !131
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %440, !dbg !131
  %442 = bitcast float %316 to i32, !dbg !131
  %443 = bitcast float %318 to i32, !dbg !131
  %444 = bitcast float %320 to i32, !dbg !131
  %445 = bitcast float %322 to i32, !dbg !131
  %446 = bitcast float %421 to i32, !dbg !131
  %447 = bitcast float %423 to i32, !dbg !131
  %448 = bitcast float %425 to i32, !dbg !131
  %449 = bitcast float %427 to i32, !dbg !131
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %441, i32 %442, i32 %443, i32 %444, i32 %445, i1 true) #2, !dbg !131
  %450 = getelementptr inbounds i8, ptr addrspace(3) %441, i64 16, !dbg !131
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %450, i32 %446, i32 %447, i32 %448, i32 %449, i1 true) #2, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %451 = zext nneg i32 %11 to i64, !dbg !131
  %452 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %451, !dbg !131
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "@$5 ld.shared.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r,b"(ptr addrspace(3) %452, i1 true) #2, !dbg !131
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !131
  %455 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !131
  %456 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !131
  %457 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !131
  %458 = zext nneg i32 %12 to i64, !dbg !131
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %458, !dbg !131
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "@$5 ld.shared.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,r,b"(ptr addrspace(3) %459, i1 true) #2, !dbg !131
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !131
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !131
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !131
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %437, i1 true) #2, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %462, i32 %463, i32 %464, ptr addrspace(1) %439, i1 true) #2, !dbg !131
  %465 = sext i32 %13 to i64, !dbg !132
  %466 = getelementptr i8, ptr addrspace(1) %2, i64 %465, !dbg !132
  %467 = bitcast <4 x i8> %330 to i32, !dbg !133
  %468 = bitcast <4 x i8> %435 to i32, !dbg !133
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %467, i32 %468, ptr addrspace(1) %466, i1 true) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chfhfx47weev65xy3vuuw35yxhuvzoiakd7h7k62bayuaddlwdbr.py", directory: "/tmp/torchinductor_meng/hf")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 20, scope: !7)
!15 = !DILocation(line: 24, column: 20, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 18, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 19, scope: !7)
!21 = !DILocation(line: 37, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 51, scope: !7)
!23 = !DILocation(line: 38, column: 64, scope: !7)
!24 = !DILocation(line: 38, column: 41, scope: !7)
!25 = !DILocation(line: 38, column: 47, scope: !7)
!26 = !DILocation(line: 38, column: 58, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 70, scope: !7)
!29 = !DILocation(line: 42, column: 21, scope: !7)
!30 = !DILocation(line: 45, column: 19, scope: !7)
!31 = !DILocation(line: 46, column: 47, scope: !7)
!32 = !DILocation(line: 46, column: 58, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 70, scope: !7)
!35 = !DILocation(line: 55, column: 47, scope: !7)
!36 = !DILocation(line: 55, column: 58, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 70, scope: !7)
!39 = !DILocation(line: 62, column: 20, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 45, scope: !7)
!42 = !DILocation(line: 64, column: 56, scope: !7)
!43 = !DILocation(line: 64, column: 31, scope: !7)
!44 = !DILocation(line: 64, column: 68, scope: !7)
!45 = !DILocation(line: 68, column: 20, scope: !7)
!46 = !DILocation(line: 69, column: 48, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 69, column: 60, scope: !7)
!49 = !DILocation(line: 74, column: 42, scope: !7)
!50 = !DILocation(line: 74, column: 53, scope: !7)
!51 = !DILocation(line: 74, column: 31, scope: !7)
!52 = !DILocation(line: 74, column: 65, scope: !7)
!53 = !DILocation(line: 78, column: 17, scope: !7)
!54 = !DILocation(line: 79, column: 21, scope: !7)
!55 = !DILocation(line: 80, column: 20, scope: !7)
!56 = !DILocation(line: 81, column: 20, scope: !7)
!57 = !DILocation(line: 82, column: 20, scope: !7)
!58 = !DILocation(line: 83, column: 44, scope: !7)
!59 = !DILocation(line: 83, column: 55, scope: !7)
!60 = !DILocation(line: 83, column: 31, scope: !7)
!61 = !DILocation(line: 83, column: 67, scope: !7)
!62 = !DILocation(line: 87, column: 20, scope: !7)
!63 = !DILocation(line: 88, column: 44, scope: !7)
!64 = !DILocation(line: 88, column: 55, scope: !7)
!65 = !DILocation(line: 88, column: 31, scope: !7)
!66 = !DILocation(line: 88, column: 67, scope: !7)
!67 = !DILocation(line: 93, column: 44, scope: !7)
!68 = !DILocation(line: 93, column: 55, scope: !7)
!69 = !DILocation(line: 93, column: 31, scope: !7)
!70 = !DILocation(line: 93, column: 67, scope: !7)
!71 = !DILocation(line: 40, column: 35, scope: !7)
!72 = !DILocation(line: 48, column: 35, scope: !7)
!73 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 49, column: 42, scope: !7)
!77 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 57, column: 35, scope: !7)
!81 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !82)
!82 = !DILocation(line: 58, column: 42, scope: !7)
!83 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !82)
!84 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !82)
!85 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !82)
!86 = !DILocation(line: 66, column: 35, scope: !7)
!87 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !88)
!88 = !DILocation(line: 67, column: 42, scope: !7)
!89 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !88)
!90 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !88)
!91 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !88)
!92 = !DILocation(line: 71, column: 35, scope: !7)
!93 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !94)
!94 = !DILocation(line: 72, column: 42, scope: !7)
!95 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !94)
!96 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !94)
!97 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !94)
!98 = !DILocation(line: 76, column: 35, scope: !7)
!99 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !100)
!100 = !DILocation(line: 77, column: 42, scope: !7)
!101 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !100)
!102 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !100)
!103 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !100)
!104 = !DILocation(line: 85, column: 35, scope: !7)
!105 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 86, column: 42, scope: !7)
!107 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 90, column: 35, scope: !7)
!111 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !112)
!112 = !DILocation(line: 91, column: 42, scope: !7)
!113 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !112)
!114 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !112)
!115 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !112)
!116 = !DILocation(line: 95, column: 35, scope: !7)
!117 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !118)
!118 = !DILocation(line: 96, column: 42, scope: !7)
!119 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !118)
!120 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !118)
!121 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !118)
!122 = !DILocation(line: 100, column: 35, scope: !7)
!123 = !DILocation(line: 103, column: 35, scope: !7)
!124 = !DILocation(line: 106, column: 35, scope: !7)
!125 = !DILocation(line: 109, column: 35, scope: !7)
!126 = !DILocation(line: 112, column: 35, scope: !7)
!127 = !DILocation(line: 115, column: 35, scope: !7)
!128 = !DILocation(line: 118, column: 35, scope: !7)
!129 = !DILocation(line: 121, column: 35, scope: !7)
!130 = !DILocation(line: 122, column: 25, scope: !7)
!131 = !DILocation(line: 122, column: 37, scope: !7)
!132 = !DILocation(line: 123, column: 25, scope: !7)
!133 = !DILocation(line: 123, column: 37, scope: !7)
!134 = !DILocation(line: 123, column: 4, scope: !7)
