; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = sdiv i32 %10, 3584, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 64, !dbg !15
  %13 = srem i32 %12, 56, !dbg !16
  %14 = mul i32 %12, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = shl nsw i32 %11, 1, !dbg !18
  %16 = add i32 %6, -3584, !dbg !19
  %17 = icmp ult i32 %16, 200704, !dbg !19
  %18 = icmp sgt i32 %13, 0, !dbg !20
  %19 = and i1 %17, %18, !dbg !21
  %20 = shl nsw i32 %13, 7, !dbg !22
  %21 = mul i32 %11, 14336, !dbg !23
  %22 = add i32 %21, %.decomposed, !dbg !24
  %23 = add i32 %22, -7232, !dbg !25
  %24 = add i32 %23, %20, !dbg !26
  %25 = sext i32 %24 to i64, !dbg !27
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !27
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %19) #1, !dbg !28
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !28
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !28
  %30 = icmp sgt i32 %13, -1, !dbg !29
  %31 = and i1 %17, %30, !dbg !30
  %32 = add i32 %22, -7168, !dbg !31
  %33 = add i32 %32, %20, !dbg !32
  %34 = sext i32 %33 to i64, !dbg !33
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !33
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %35, i1 %31) #1, !dbg !34
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !34
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !34
  %39 = add i32 %22, -7104, !dbg !35
  %40 = add i32 %39, %20, !dbg !36
  %41 = sext i32 %40 to i64, !dbg !37
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !37
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %31) #1, !dbg !38
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !38
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !38
  %46 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !38
  %47 = insertelement <2 x i32> %46, i32 %45, i64 1, !dbg !38
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !38
  %49 = add i32 %10, 3583, !dbg !39
  %50 = icmp ult i32 %49, 204287, !dbg !39
  %51 = and i1 %50, %18, !dbg !40
  %52 = add i32 %22, -64, !dbg !41
  %53 = add i32 %52, %20, !dbg !42
  %54 = sext i32 %53 to i64, !dbg !43
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !43
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %51) #1, !dbg !44
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !44
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !44
  %59 = and i1 %50, %30, !dbg !45
  %60 = add i32 %22, %20, !dbg !46
  %61 = sext i32 %60 to i64, !dbg !47
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !47
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %62, i1 %59) #1, !dbg !48
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !48
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !48
  %66 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !48
  %67 = insertelement <2 x i32> %66, i32 %65, i64 1, !dbg !48
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !48
  %69 = add i32 %22, 64, !dbg !49
  %70 = add i32 %69, %20, !dbg !50
  %71 = sext i32 %70 to i64, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !51
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %72, i1 %59) #1, !dbg !52
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !52
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !52
  %76 = or disjoint i32 %15, 1, !dbg !53
  %77 = icmp sgt i32 %10, -3584, !dbg !54
  %78 = icmp slt i32 %76, 112, !dbg !55
  %79 = and i1 %77, %78, !dbg !56
  %80 = and i1 %18, %79, !dbg !57
  %81 = add i32 %22, 7104, !dbg !58
  %82 = add i32 %81, %20, !dbg !59
  %83 = sext i32 %82 to i64, !dbg !60
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !60
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %84, i1 %80) #1, !dbg !61
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !61
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !61
  %88 = and i1 %30, %79, !dbg !62
  %89 = add i32 %22, 7168, !dbg !63
  %90 = add i32 %89, %20, !dbg !64
  %91 = sext i32 %90 to i64, !dbg !65
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !65
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %92, i1 %88) #1, !dbg !66
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !66
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !66
  %96 = add i32 %22, 7232, !dbg !67
  %97 = add i32 %96, %20, !dbg !68
  %98 = sext i32 %97 to i64, !dbg !69
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !69
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %99, i1 %88) #1, !dbg !70
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !70
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !70
  %103 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !28
  %104 = insertelement <2 x i32> %103, i32 %29, i64 1, !dbg !28
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !28
  %106 = insertelement <2 x i1> poison, i1 %19, i64 0, !dbg !71
  %107 = shufflevector <2 x i1> %106, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !71
  %108 = select <2 x i1> %107, <2 x float> %105, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !71
  %109 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !34
  %110 = insertelement <2 x i32> %109, i32 %38, i64 1, !dbg !34
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !34
  %112 = insertelement <2 x i1> poison, i1 %31, i64 0, !dbg !72
  %113 = shufflevector <2 x i1> %112, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !72
  %114 = select <2 x i1> %113, <2 x float> %111, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !72
  %115 = fcmp ogt <2 x float> %114, %108, !dbg !73
  %116 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !77
  %117 = or <2 x i1> %115, %116, !dbg !78
  %118 = select <2 x i1> %117, <2 x float> %114, <2 x float> %108, !dbg !79
  %119 = select <2 x i1> %113, <2 x float> %48, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !80
  %120 = fcmp ogt <2 x float> %119, %118, !dbg !81
  %121 = fcmp uno <2 x float> %119, zeroinitializer, !dbg !83
  %122 = or <2 x i1> %121, %120, !dbg !84
  %123 = select <2 x i1> %122, <2 x float> %119, <2 x float> %118, !dbg !85
  %124 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !44
  %125 = insertelement <2 x i32> %124, i32 %58, i64 1, !dbg !44
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !44
  %127 = insertelement <2 x i1> poison, i1 %51, i64 0, !dbg !86
  %128 = shufflevector <2 x i1> %127, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !86
  %129 = select <2 x i1> %128, <2 x float> %126, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !86
  %130 = fcmp ogt <2 x float> %129, %123, !dbg !87
  %131 = fcmp uno <2 x float> %129, zeroinitializer, !dbg !89
  %132 = or <2 x i1> %131, %130, !dbg !90
  %133 = select <2 x i1> %132, <2 x float> %129, <2 x float> %123, !dbg !91
  %134 = insertelement <2 x i1> poison, i1 %59, i64 0, !dbg !92
  %135 = shufflevector <2 x i1> %134, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !92
  %136 = select <2 x i1> %135, <2 x float> %68, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !92
  %137 = fcmp ogt <2 x float> %136, %133, !dbg !93
  %138 = fcmp uno <2 x float> %136, zeroinitializer, !dbg !95
  %139 = or <2 x i1> %138, %137, !dbg !96
  %140 = select <2 x i1> %139, <2 x float> %136, <2 x float> %133, !dbg !97
  %141 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !52
  %142 = insertelement <2 x i32> %141, i32 %75, i64 1, !dbg !52
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !52
  %144 = select <2 x i1> %135, <2 x float> %143, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !98
  %145 = fcmp ogt <2 x float> %144, %140, !dbg !99
  %146 = fcmp uno <2 x float> %144, zeroinitializer, !dbg !101
  %147 = or <2 x i1> %146, %145, !dbg !102
  %148 = select <2 x i1> %147, <2 x float> %144, <2 x float> %140, !dbg !103
  %149 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !61
  %150 = insertelement <2 x i32> %149, i32 %87, i64 1, !dbg !61
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !61
  %152 = insertelement <2 x i1> poison, i1 %80, i64 0, !dbg !104
  %153 = shufflevector <2 x i1> %152, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !104
  %154 = select <2 x i1> %153, <2 x float> %151, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !104
  %155 = fcmp ogt <2 x float> %154, %148, !dbg !105
  %156 = fcmp uno <2 x float> %154, zeroinitializer, !dbg !107
  %157 = or <2 x i1> %156, %155, !dbg !108
  %158 = select <2 x i1> %157, <2 x float> %154, <2 x float> %148, !dbg !109
  %159 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !66
  %160 = insertelement <2 x i32> %159, i32 %95, i64 1, !dbg !66
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !66
  %162 = insertelement <2 x i1> poison, i1 %88, i64 0, !dbg !110
  %163 = shufflevector <2 x i1> %162, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !110
  %164 = select <2 x i1> %163, <2 x float> %161, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !110
  %165 = fcmp ogt <2 x float> %164, %158, !dbg !111
  %166 = fcmp uno <2 x float> %164, zeroinitializer, !dbg !113
  %167 = or <2 x i1> %166, %165, !dbg !114
  %168 = select <2 x i1> %167, <2 x float> %164, <2 x float> %158, !dbg !115
  %169 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !70
  %170 = insertelement <2 x i32> %169, i32 %102, i64 1, !dbg !70
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !70
  %172 = select <2 x i1> %163, <2 x float> %171, <2 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000>, !dbg !116
  %173 = fcmp ogt <2 x float> %172, %168, !dbg !117
  %174 = extractelement <2 x float> %172, i64 0, !dbg !119
  %175 = fcmp uno float %174, 0.000000e+00, !dbg !120
  %176 = extractelement <2 x float> %172, i64 1, !dbg !119
  %177 = fcmp uno float %176, 0.000000e+00, !dbg !120
  %178 = extractelement <2 x i1> %173, i64 0, !dbg !121
  %179 = or i1 %175, %178, !dbg !121
  %180 = extractelement <2 x i1> %173, i64 1, !dbg !121
  %181 = or i1 %177, %180, !dbg !121
  %182 = extractelement <2 x float> %168, i64 0, !dbg !119
  %183 = select i1 %179, float %174, float %182, !dbg !119
  %184 = extractelement <2 x float> %168, i64 1, !dbg !119
  %185 = select i1 %181, float %176, float %184, !dbg !119
  %186 = zext <2 x i1> %115 to <2 x i8>, !dbg !122
  %187 = select <2 x i1> %120, <2 x i8> <i8 2, i8 2>, <2 x i8> %186, !dbg !123
  %188 = select <2 x i1> %130, <2 x i8> <i8 3, i8 3>, <2 x i8> %187, !dbg !124
  %189 = select <2 x i1> %137, <2 x i8> <i8 4, i8 4>, <2 x i8> %188, !dbg !125
  %190 = select <2 x i1> %145, <2 x i8> <i8 5, i8 5>, <2 x i8> %189, !dbg !126
  %191 = select <2 x i1> %155, <2 x i8> <i8 6, i8 6>, <2 x i8> %190, !dbg !127
  %192 = select <2 x i1> %165, <2 x i8> <i8 7, i8 7>, <2 x i8> %191, !dbg !128
  %193 = select <2 x i1> %173, <2 x i8> <i8 8, i8 8>, <2 x i8> %192, !dbg !129
  %194 = sext i32 %10 to i64, !dbg !130
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !130
  %196 = bitcast float %183 to i32, !dbg !131
  %197 = bitcast float %185 to i32, !dbg !131
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %196, i32 %197, ptr addrspace(1) %195, i1 true) #1, !dbg !131
  %198 = getelementptr i8, ptr addrspace(1) %2, i64 %194, !dbg !132
  %199 = bitcast <2 x i8> %193 to i16, !dbg !133
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %199, ptr addrspace(1) %198, i1 true) #1, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chfhfx47weev65xy3vuuw35yxhuvzoiakd7h7k62bayuaddlwdbr.py", directory: "/tmp/torchinductor_meng/hf")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 20, scope: !7)
!15 = !DILocation(line: 24, column: 20, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 18, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 19, scope: !7)
!21 = !DILocation(line: 37, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 51, scope: !7)
!23 = !DILocation(line: 38, column: 64, scope: !7)
!24 = !DILocation(line: 38, column: 41, scope: !7)
!25 = !DILocation(line: 38, column: 47, scope: !7)
!26 = !DILocation(line: 38, column: 58, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 70, scope: !7)
!29 = !DILocation(line: 42, column: 21, scope: !7)
!30 = !DILocation(line: 45, column: 19, scope: !7)
!31 = !DILocation(line: 46, column: 47, scope: !7)
!32 = !DILocation(line: 46, column: 58, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 70, scope: !7)
!35 = !DILocation(line: 55, column: 47, scope: !7)
!36 = !DILocation(line: 55, column: 58, scope: !7)
!37 = !DILocation(line: 55, column: 31, scope: !7)
!38 = !DILocation(line: 55, column: 70, scope: !7)
!39 = !DILocation(line: 62, column: 20, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 45, scope: !7)
!42 = !DILocation(line: 64, column: 56, scope: !7)
!43 = !DILocation(line: 64, column: 31, scope: !7)
!44 = !DILocation(line: 64, column: 68, scope: !7)
!45 = !DILocation(line: 68, column: 20, scope: !7)
!46 = !DILocation(line: 69, column: 48, scope: !7)
!47 = !DILocation(line: 69, column: 31, scope: !7)
!48 = !DILocation(line: 69, column: 60, scope: !7)
!49 = !DILocation(line: 74, column: 42, scope: !7)
!50 = !DILocation(line: 74, column: 53, scope: !7)
!51 = !DILocation(line: 74, column: 31, scope: !7)
!52 = !DILocation(line: 74, column: 65, scope: !7)
!53 = !DILocation(line: 78, column: 17, scope: !7)
!54 = !DILocation(line: 79, column: 21, scope: !7)
!55 = !DILocation(line: 80, column: 20, scope: !7)
!56 = !DILocation(line: 81, column: 20, scope: !7)
!57 = !DILocation(line: 82, column: 20, scope: !7)
!58 = !DILocation(line: 83, column: 44, scope: !7)
!59 = !DILocation(line: 83, column: 55, scope: !7)
!60 = !DILocation(line: 83, column: 31, scope: !7)
!61 = !DILocation(line: 83, column: 67, scope: !7)
!62 = !DILocation(line: 87, column: 20, scope: !7)
!63 = !DILocation(line: 88, column: 44, scope: !7)
!64 = !DILocation(line: 88, column: 55, scope: !7)
!65 = !DILocation(line: 88, column: 31, scope: !7)
!66 = !DILocation(line: 88, column: 67, scope: !7)
!67 = !DILocation(line: 93, column: 44, scope: !7)
!68 = !DILocation(line: 93, column: 55, scope: !7)
!69 = !DILocation(line: 93, column: 31, scope: !7)
!70 = !DILocation(line: 93, column: 67, scope: !7)
!71 = !DILocation(line: 40, column: 35, scope: !7)
!72 = !DILocation(line: 48, column: 35, scope: !7)
!73 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 49, column: 42, scope: !7)
!77 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 57, column: 35, scope: !7)
!81 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !82)
!82 = !DILocation(line: 58, column: 42, scope: !7)
!83 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !82)
!84 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !82)
!85 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !82)
!86 = !DILocation(line: 66, column: 35, scope: !7)
!87 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !88)
!88 = !DILocation(line: 67, column: 42, scope: !7)
!89 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !88)
!90 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !88)
!91 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !88)
!92 = !DILocation(line: 71, column: 35, scope: !7)
!93 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !94)
!94 = !DILocation(line: 72, column: 42, scope: !7)
!95 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !94)
!96 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !94)
!97 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !94)
!98 = !DILocation(line: 76, column: 35, scope: !7)
!99 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !100)
!100 = !DILocation(line: 77, column: 42, scope: !7)
!101 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !100)
!102 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !100)
!103 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !100)
!104 = !DILocation(line: 85, column: 35, scope: !7)
!105 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 86, column: 42, scope: !7)
!107 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 90, column: 35, scope: !7)
!111 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !112)
!112 = !DILocation(line: 91, column: 42, scope: !7)
!113 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !112)
!114 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !112)
!115 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !112)
!116 = !DILocation(line: 95, column: 35, scope: !7)
!117 = !DILocation(line: 68, column: 15, scope: !74, inlinedAt: !118)
!118 = !DILocation(line: 96, column: 42, scope: !7)
!119 = !DILocation(line: 71, column: 29, scope: !74, inlinedAt: !118)
!120 = !DILocation(line: 70, column: 21, scope: !74, inlinedAt: !118)
!121 = !DILocation(line: 70, column: 16, scope: !74, inlinedAt: !118)
!122 = !DILocation(line: 100, column: 35, scope: !7)
!123 = !DILocation(line: 103, column: 35, scope: !7)
!124 = !DILocation(line: 106, column: 35, scope: !7)
!125 = !DILocation(line: 109, column: 35, scope: !7)
!126 = !DILocation(line: 112, column: 35, scope: !7)
!127 = !DILocation(line: 115, column: 35, scope: !7)
!128 = !DILocation(line: 118, column: 35, scope: !7)
!129 = !DILocation(line: 121, column: 35, scope: !7)
!130 = !DILocation(line: 122, column: 25, scope: !7)
!131 = !DILocation(line: 122, column: 37, scope: !7)
!132 = !DILocation(line: 123, column: 25, scope: !7)
!133 = !DILocation(line: 123, column: 37, scope: !7)
!134 = !DILocation(line: 123, column: 4, scope: !7)
