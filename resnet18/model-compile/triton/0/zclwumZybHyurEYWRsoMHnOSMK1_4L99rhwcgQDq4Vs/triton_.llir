; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 128, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %56 = fadd float %33, 0x3EE4F8B580000000, !dbg !27
  %57 = fadd float %34, 0x3EE4F8B580000000, !dbg !27
  %58 = fadd float %35, 0x3EE4F8B580000000, !dbg !27
  %59 = fadd float %36, 0x3EE4F8B580000000, !dbg !27
  %60 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %61 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %62 = fadd float %44, 0x3EE4F8B580000000, !dbg !27
  %63 = fadd float %45, 0x3EE4F8B580000000, !dbg !27
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %64, 0, !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %65, 0, !dbg !28
  br i1 %.not.i, label %71, label %66, !dbg !28

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !28

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !28

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !28
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %76, 0, !dbg !28
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !28
  br i1 %.not.i1, label %83, label %78, !dbg !28

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !28

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !28

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !28
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %88, 0, !dbg !28
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %89, 0, !dbg !28
  br i1 %.not.i6, label %95, label %90, !dbg !28

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !28

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !28

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %91, %93, %96, %98
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !28
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %100, 0, !dbg !28
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %101, 0, !dbg !28
  br i1 %.not.i11, label %107, label %102, !dbg !28

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !28

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !28

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %103, %105, %108, %110
  %.0.i13 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !28
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %112, 0, !dbg !28
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %113, 0, !dbg !28
  br i1 %.not.i16, label %119, label %114, !dbg !28

114:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %117, label %115, !dbg !28

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

119:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %122, label %120, !dbg !28

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %115, %117, %120, %122
  %.0.i18 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !28
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %124, 0, !dbg !28
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %125, 0, !dbg !28
  br i1 %.not.i21, label %131, label %126, !dbg !28

126:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %129, label %127, !dbg !28

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

131:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %134, label %132, !dbg !28

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %127, %129, %132, %134
  %.0.i23 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %136, 0, !dbg !28
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %137, 0, !dbg !28
  br i1 %.not.i26, label %143, label %138, !dbg !28

138:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %141, label %139, !dbg !28

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

143:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %146, label %144, !dbg !28

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %139, %141, %144, %146
  %.0.i28 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %148, 0, !dbg !28
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %149, 0, !dbg !28
  br i1 %.not.i31, label %155, label %150, !dbg !28

150:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %153, label %151, !dbg !28

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

155:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %158, label %156, !dbg !28

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %151, %153, %156, %158
  %.0.i33 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !28
  %160 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %161 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %162 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %163 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %164 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %165 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %166 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %167 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %169 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %170 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %171 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %174 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %175 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %176 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %177 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %179 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %180 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %181 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %183 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %186 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %189 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %190 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %191 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %193 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %195 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %196 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %197 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %198 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %199 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %208 = insertelement <8 x i32> poison, i32 %160, i64 0, !dbg !16
  %209 = insertelement <8 x i32> %208, i32 %162, i64 1, !dbg !16
  %210 = insertelement <8 x i32> %209, i32 %164, i64 2, !dbg !16
  %211 = insertelement <8 x i32> %210, i32 %166, i64 3, !dbg !16
  %212 = insertelement <8 x i32> %211, i32 %168, i64 4, !dbg !16
  %213 = insertelement <8 x i32> %212, i32 %170, i64 5, !dbg !16
  %214 = insertelement <8 x i32> %213, i32 %172, i64 6, !dbg !16
  %215 = insertelement <8 x i32> %214, i32 %174, i64 7, !dbg !16
  %216 = bitcast <8 x i32> %215 to <8 x float>, !dbg !16
  %217 = insertelement <8 x i32> poison, i32 %161, i64 0, !dbg !18
  %218 = insertelement <8 x i32> %217, i32 %163, i64 1, !dbg !18
  %219 = insertelement <8 x i32> %218, i32 %165, i64 2, !dbg !18
  %220 = insertelement <8 x i32> %219, i32 %167, i64 3, !dbg !18
  %221 = insertelement <8 x i32> %220, i32 %169, i64 4, !dbg !18
  %222 = insertelement <8 x i32> %221, i32 %171, i64 5, !dbg !18
  %223 = insertelement <8 x i32> %222, i32 %173, i64 6, !dbg !18
  %224 = insertelement <8 x i32> %223, i32 %175, i64 7, !dbg !18
  %225 = bitcast <8 x i32> %224 to <8 x float>, !dbg !18
  %226 = fsub <8 x float> %216, %225, !dbg !30
  %227 = insertelement <8 x i32> poison, i32 %176, i64 0, !dbg !26
  %228 = insertelement <8 x i32> %227, i32 %177, i64 1, !dbg !26
  %229 = insertelement <8 x i32> %228, i32 %178, i64 2, !dbg !26
  %230 = insertelement <8 x i32> %229, i32 %179, i64 3, !dbg !26
  %231 = insertelement <8 x i32> %230, i32 %180, i64 4, !dbg !26
  %232 = insertelement <8 x i32> %231, i32 %181, i64 5, !dbg !26
  %233 = insertelement <8 x i32> %232, i32 %182, i64 6, !dbg !26
  %234 = insertelement <8 x i32> %233, i32 %183, i64 7, !dbg !26
  %235 = bitcast <8 x i32> %234 to <8 x float>, !dbg !26
  %236 = insertelement <8 x i32> poison, i32 %184, i64 0, !dbg !24
  %237 = insertelement <8 x i32> %236, i32 %185, i64 1, !dbg !24
  %238 = insertelement <8 x i32> %237, i32 %186, i64 2, !dbg !24
  %239 = insertelement <8 x i32> %238, i32 %187, i64 3, !dbg !24
  %240 = insertelement <8 x i32> %239, i32 %188, i64 4, !dbg !24
  %241 = insertelement <8 x i32> %240, i32 %189, i64 5, !dbg !24
  %242 = insertelement <8 x i32> %241, i32 %190, i64 6, !dbg !24
  %243 = insertelement <8 x i32> %242, i32 %191, i64 7, !dbg !24
  %244 = bitcast <8 x i32> %243 to <8 x float>, !dbg !24
  %245 = insertelement <8 x i32> poison, i32 %192, i64 0, !dbg !22
  %246 = insertelement <8 x i32> %245, i32 %193, i64 1, !dbg !22
  %247 = insertelement <8 x i32> %246, i32 %194, i64 2, !dbg !22
  %248 = insertelement <8 x i32> %247, i32 %195, i64 3, !dbg !22
  %249 = insertelement <8 x i32> %248, i32 %196, i64 4, !dbg !22
  %250 = insertelement <8 x i32> %249, i32 %197, i64 5, !dbg !22
  %251 = insertelement <8 x i32> %250, i32 %198, i64 6, !dbg !22
  %252 = insertelement <8 x i32> %251, i32 %199, i64 7, !dbg !22
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !22
  %254 = insertelement <8 x float> poison, float %207, i64 0, !dbg !31
  %255 = insertelement <8 x float> %254, float %206, i64 1, !dbg !31
  %256 = insertelement <8 x float> %255, float %205, i64 2, !dbg !31
  %257 = insertelement <8 x float> %256, float %204, i64 3, !dbg !31
  %258 = insertelement <8 x float> %257, float %203, i64 4, !dbg !31
  %259 = insertelement <8 x float> %258, float %202, i64 5, !dbg !31
  %260 = insertelement <8 x float> %259, float %201, i64 6, !dbg !31
  %261 = insertelement <8 x float> %260, float %200, i64 7, !dbg !31
  %262 = fmul <8 x float> %226, %261, !dbg !31
  %263 = fmul <8 x float> %262, %253, !dbg !32
  %264 = fadd <8 x float> %263, %244, !dbg !33
  %265 = fadd <8 x float> %264, %235, !dbg !34
  %266 = fcmp olt <8 x float> %265, zeroinitializer, !dbg !35
  %267 = extractelement <8 x i1> %266, i64 7, !dbg !39
  %bc = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %268 = extractelement <8 x i32> %bc, i64 7, !dbg !40
  %269 = extractelement <8 x i1> %266, i64 6, !dbg !39
  %bc36 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %270 = extractelement <8 x i32> %bc36, i64 6, !dbg !40
  %271 = extractelement <8 x i1> %266, i64 5, !dbg !39
  %bc37 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %272 = extractelement <8 x i32> %bc37, i64 5, !dbg !40
  %273 = extractelement <8 x i1> %266, i64 4, !dbg !39
  %bc38 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %274 = extractelement <8 x i32> %bc38, i64 4, !dbg !40
  %275 = extractelement <8 x i1> %266, i64 3, !dbg !39
  %bc39 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %276 = extractelement <8 x i32> %bc39, i64 3, !dbg !40
  %277 = extractelement <8 x i1> %266, i64 2, !dbg !39
  %bc40 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %278 = extractelement <8 x i32> %bc40, i64 2, !dbg !40
  %279 = extractelement <8 x i1> %266, i64 1, !dbg !39
  %bc41 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %280 = extractelement <8 x i32> %bc41, i64 1, !dbg !40
  %281 = extractelement <8 x i1> %266, i64 0, !dbg !39
  %bc42 = bitcast <8 x float> %265 to <8 x i32>, !dbg !40
  %282 = extractelement <8 x i32> %bc42, i64 0, !dbg !40
  %283 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !41
  %284 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !41
  %285 = select i1 %267, i32 0, i32 %268, !dbg !40
  %286 = select i1 %269, i32 0, i32 %270, !dbg !40
  %287 = select i1 %271, i32 0, i32 %272, !dbg !40
  %288 = select i1 %273, i32 0, i32 %274, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %286, i32 %287, i32 %288, ptr addrspace(1) %283, i1 true) #3, !dbg !40
  %289 = select i1 %275, i32 0, i32 %276, !dbg !40
  %290 = select i1 %277, i32 0, i32 %278, !dbg !40
  %291 = select i1 %279, i32 0, i32 %280, !dbg !40
  %292 = select i1 %281, i32 0, i32 %282, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %284, i1 true) #3, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj2lijctmo45qra37osy5eho34jhgamdbkaqiocc7nnj6vqfnc5y.py", directory: "/tmp/torchinductor_meng/j2")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 18, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 31, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 68, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 44, column: 42, scope: !7)
!39 = !DILocation(line: 71, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 45, column: 37, scope: !7)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 4, scope: !7)
