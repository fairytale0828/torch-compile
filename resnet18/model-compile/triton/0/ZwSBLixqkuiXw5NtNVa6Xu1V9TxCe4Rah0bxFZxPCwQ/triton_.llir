; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 50176, !dbg !14
  %20 = srem i32 %18, 256, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %19) #3, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %19) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %19) #3, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %19) #3, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %19) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !30
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = bitcast i32 %50 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !32
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %19) #3, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !34
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %19) #3, !dbg !35
  %59 = fadd float %33, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %34, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %35, 0x3EE4F8B580000000, !dbg !36
  %62 = fadd float %36, 0x3EE4F8B580000000, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %63, 0, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %64, 0, !dbg !37
  br i1 %.not.i, label %70, label %65, !dbg !37

65:                                               ; preds = %12
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

70:                                               ; preds = %12
  br i1 %.not1.i, label %73, label %71, !dbg !37

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %75, 0, !dbg !37
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !37
  br i1 %.not.i1, label %82, label %77, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !37

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i6 = icmp eq i32 %87, 0, !dbg !37
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !37
  br i1 %.not.i6, label %94, label %89, !dbg !37

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !37

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !37

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i11 = icmp eq i32 %99, 0, !dbg !37
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !37
  br i1 %.not.i11, label %106, label %101, !dbg !37

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !37

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !37

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !37
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %115 = fadd float %51, 0x3EE4F8B580000000, !dbg !39
  %116 = fadd float %52, 0x3EE4F8B580000000, !dbg !39
  %117 = fadd float %53, 0x3EE4F8B580000000, !dbg !39
  %118 = fadd float %54, 0x3EE4F8B580000000, !dbg !39
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i16 = icmp eq i32 %119, 0, !dbg !40
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i19 = icmp eq i32 %120, 0, !dbg !40
  br i1 %.not.i16, label %126, label %121, !dbg !40

121:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %124, label %122, !dbg !40

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !40

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

__nv_sqrtf.exit20:                                ; preds = %122, %124, %127, %129
  %.0.i18 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !40
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i21 = icmp eq i32 %131, 0, !dbg !40
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i24 = icmp eq i32 %132, 0, !dbg !40
  br i1 %.not.i21, label %138, label %133, !dbg !40

133:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %136, label %134, !dbg !40

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !40

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

__nv_sqrtf.exit25:                                ; preds = %134, %136, %139, %141
  %.0.i23 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !40
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i26 = icmp eq i32 %143, 0, !dbg !40
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i29 = icmp eq i32 %144, 0, !dbg !40
  br i1 %.not.i26, label %150, label %145, !dbg !40

145:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %148, label %146, !dbg !40

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !40

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

__nv_sqrtf.exit30:                                ; preds = %146, %148, %151, %153
  %.0.i28 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !40
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i31 = icmp eq i32 %155, 0, !dbg !40
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i34 = icmp eq i32 %156, 0, !dbg !40
  br i1 %.not.i31, label %162, label %157, !dbg !40

157:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %160, label %158, !dbg !40

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !40

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

__nv_sqrtf.exit35:                                ; preds = %158, %160, %163, %165
  %.0.i33 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !40
  %167 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %168 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %169 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %170 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %172 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %173 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %174 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %175 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %176 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %177 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %178 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %180 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %181 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %183 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %184 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %185 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %187 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %188 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %189 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %190 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %191 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !35
  %193 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !35
  %194 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !35
  %195 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !41
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !41
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !41
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !41
  %203 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !17
  %204 = insertelement <2 x i32> %203, i32 %173, i64 1, !dbg !17
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !17
  %206 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !19
  %207 = insertelement <2 x i32> %206, i32 %174, i64 1, !dbg !19
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !19
  %209 = fsub <2 x float> %205, %208, !dbg !42
  %210 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !25
  %211 = insertelement <2 x i32> %210, i32 %194, i64 1, !dbg !25
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !25
  %213 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !23
  %214 = insertelement <2 x i32> %213, i32 %198, i64 1, !dbg !23
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !23
  %216 = insertelement <2 x float> poison, float %111, i64 0, !dbg !43
  %217 = insertelement <2 x float> %216, float %199, i64 1, !dbg !43
  %218 = fmul <2 x float> %209, %217, !dbg !43
  %219 = fmul <2 x float> %218, %215, !dbg !44
  %220 = fadd <2 x float> %219, %212, !dbg !45
  %221 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !17
  %222 = insertelement <2 x i32> %221, i32 %171, i64 1, !dbg !17
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !17
  %224 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !19
  %225 = insertelement <2 x i32> %224, i32 %172, i64 1, !dbg !19
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !19
  %227 = fsub <2 x float> %223, %226, !dbg !42
  %228 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !25
  %229 = insertelement <2 x i32> %228, i32 %193, i64 1, !dbg !25
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !25
  %231 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !23
  %232 = insertelement <2 x i32> %231, i32 %197, i64 1, !dbg !23
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !23
  %234 = insertelement <2 x float> poison, float %112, i64 0, !dbg !43
  %235 = insertelement <2 x float> %234, float %200, i64 1, !dbg !43
  %236 = fmul <2 x float> %227, %235, !dbg !43
  %237 = fmul <2 x float> %236, %233, !dbg !44
  %238 = fadd <2 x float> %237, %230, !dbg !45
  %239 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !17
  %240 = insertelement <2 x i32> %239, i32 %169, i64 1, !dbg !17
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !17
  %242 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !19
  %243 = insertelement <2 x i32> %242, i32 %170, i64 1, !dbg !19
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !19
  %245 = fsub <2 x float> %241, %244, !dbg !42
  %246 = insertelement <2 x i32> poison, i32 %182, i64 0, !dbg !25
  %247 = insertelement <2 x i32> %246, i32 %192, i64 1, !dbg !25
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !25
  %249 = insertelement <2 x i32> poison, i32 %181, i64 0, !dbg !23
  %250 = insertelement <2 x i32> %249, i32 %196, i64 1, !dbg !23
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !23
  %252 = insertelement <2 x float> poison, float %113, i64 0, !dbg !43
  %253 = insertelement <2 x float> %252, float %201, i64 1, !dbg !43
  %254 = fmul <2 x float> %245, %253, !dbg !43
  %255 = fmul <2 x float> %254, %251, !dbg !44
  %256 = fadd <2 x float> %255, %248, !dbg !45
  %257 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !17
  %258 = insertelement <2 x i32> %257, i32 %167, i64 1, !dbg !17
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !17
  %260 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !19
  %261 = insertelement <2 x i32> %260, i32 %168, i64 1, !dbg !19
  %262 = bitcast <2 x i32> %261 to <2 x float>, !dbg !19
  %263 = fsub <2 x float> %259, %262, !dbg !42
  %264 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !25
  %265 = insertelement <2 x i32> %264, i32 %191, i64 1, !dbg !25
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !25
  %267 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !23
  %268 = insertelement <2 x i32> %267, i32 %195, i64 1, !dbg !23
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !23
  %270 = insertelement <2 x float> poison, float %114, i64 0, !dbg !43
  %271 = insertelement <2 x float> %270, float %202, i64 1, !dbg !43
  %272 = fmul <2 x float> %263, %271, !dbg !43
  %273 = fmul <2 x float> %272, %269, !dbg !44
  %274 = fadd <2 x float> %273, %266, !dbg !45
  %shift = shufflevector <2 x float> %220, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %275 = fadd <2 x float> %220, %shift, !dbg !46
  %276 = extractelement <2 x float> %275, i64 0, !dbg !46
  %shift36 = shufflevector <2 x float> %238, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %277 = fadd <2 x float> %238, %shift36, !dbg !46
  %278 = extractelement <2 x float> %277, i64 0, !dbg !46
  %shift37 = shufflevector <2 x float> %256, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %279 = fadd <2 x float> %256, %shift37, !dbg !46
  %280 = extractelement <2 x float> %279, i64 0, !dbg !46
  %shift38 = shufflevector <2 x float> %274, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %281 = fadd <2 x float> %274, %shift38, !dbg !46
  %282 = extractelement <2 x float> %281, i64 0, !dbg !46
  %283 = fcmp olt float %276, 0.000000e+00, !dbg !47
  %284 = fcmp olt float %278, 0.000000e+00, !dbg !47
  %285 = fcmp olt float %280, 0.000000e+00, !dbg !47
  %286 = fcmp olt float %282, 0.000000e+00, !dbg !47
  %287 = select i1 %283, float 0.000000e+00, float %276, !dbg !51
  %288 = select i1 %284, float 0.000000e+00, float %278, !dbg !51
  %289 = select i1 %285, float 0.000000e+00, float %280, !dbg !51
  %290 = select i1 %286, float 0.000000e+00, float %282, !dbg !51
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !52
  %292 = bitcast float %287 to i32, !dbg !53
  %293 = bitcast float %288 to i32, !dbg !53
  %294 = bitcast float %289 to i32, !dbg !53
  %295 = bitcast float %290 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %291, i1 %19) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cti5vc4bogmpjw6zkxt23jgko5v5bb7p3cway33sbbzzjhqveyxr.py", directory: "/tmp/torchinductor_meng/ti")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 18, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 31, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 36, scope: !7)
!26 = !DILocation(line: 30, column: 31, scope: !7)
!27 = !DILocation(line: 30, column: 36, scope: !7)
!28 = !DILocation(line: 31, column: 31, scope: !7)
!29 = !DILocation(line: 31, column: 36, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 36, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 26, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 27, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 35, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 20, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 56, column: 42, scope: !7)
!51 = !DILocation(line: 71, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 57, column: 28, scope: !7)
!53 = !DILocation(line: 57, column: 40, scope: !7)
!54 = !DILocation(line: 57, column: 4, scope: !7)
