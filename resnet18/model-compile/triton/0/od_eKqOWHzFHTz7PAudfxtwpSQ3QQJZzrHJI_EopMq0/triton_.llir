; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = srem i32 %13, 64, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %18 = sext i32 %14 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !20
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %25 = bitcast i32 %23 to float, !dbg !20
  %26 = bitcast i32 %24 to float, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !21
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !24
  %31 = fadd float %25, 0x3EE4F8B580000000, !dbg !25
  %32 = fadd float %26, 0x3EE4F8B580000000, !dbg !25
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %33, 0, !dbg !26
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %34, 0, !dbg !26
  br i1 %.not.i, label %40, label %35, !dbg !26

35:                                               ; preds = %7
  br i1 %.not1.i, label %38, label %36, !dbg !26

36:                                               ; preds = %35
  %37 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %31) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

38:                                               ; preds = %35
  %39 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %31) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

40:                                               ; preds = %7
  br i1 %.not1.i, label %43, label %41, !dbg !26

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.f(float %31) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.f(float %31) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %36, %38, %41, %43
  %.0.i = phi float [ %37, %36 ], [ %39, %38 ], [ %42, %41 ], [ %44, %43 ], !dbg !26
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %45, 0, !dbg !26
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %46, 0, !dbg !26
  br i1 %.not.i1, label %52, label %47, !dbg !26

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %50, label %48, !dbg !26

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !26

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %48, %50, %53, %55
  %.0.i3 = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !26
  %57 = extractvalue { i32, i32 } %17, 1, !dbg !16
  %58 = bitcast i32 %57 to float, !dbg !16
  %59 = extractvalue { i32, i32 } %20, 1, !dbg !18
  %60 = bitcast i32 %59 to float, !dbg !18
  %61 = fsub float %58, %60, !dbg !27
  %62 = extractvalue { i32, i32 } %17, 0, !dbg !16
  %63 = bitcast i32 %62 to float, !dbg !16
  %64 = extractvalue { i32, i32 } %20, 0, !dbg !18
  %65 = bitcast i32 %64 to float, !dbg !18
  %66 = fsub float %63, %65, !dbg !27
  %67 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %70 = bitcast i32 %69 to float, !dbg !24
  %71 = extractvalue { i32, i32 } %28, 1, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = extractvalue { i32, i32 } %28, 0, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %77 = fmul float %66, %75, !dbg !29
  %78 = fmul float %61, %76, !dbg !29
  %79 = fmul float %77, %74, !dbg !30
  %80 = fmul float %78, %72, !dbg !30
  %81 = fadd float %79, %70, !dbg !31
  %82 = fadd float %80, %68, !dbg !31
  %83 = fcmp olt float %81, 0.000000e+00, !dbg !32
  %84 = fcmp olt float %82, 0.000000e+00, !dbg !32
  %85 = select i1 %83, float 0.000000e+00, float %81, !dbg !36
  %86 = select i1 %84, float 0.000000e+00, float %82, !dbg !36
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %15, !dbg !37
  %88 = bitcast float %85 to i32, !dbg !38
  %89 = bitcast float %86 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %87, i1 true) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpeoullxmpx4mgfmvrz2srnse3gu44o7ffs3euifhv3ax5gjlihg.py", directory: "/tmp/torchinductor_meng/pe")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 18, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 31, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 33, column: 26, scope: !7)
!27 = !DILocation(line: 30, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 20, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 68, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 42, column: 42, scope: !7)
!36 = !DILocation(line: 71, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 43, column: 25, scope: !7)
!38 = !DILocation(line: 43, column: 37, scope: !7)
!39 = !DILocation(line: 43, column: 4, scope: !7)
