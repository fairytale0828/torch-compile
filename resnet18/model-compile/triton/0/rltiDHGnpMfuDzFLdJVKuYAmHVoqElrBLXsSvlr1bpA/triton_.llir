; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = srem i32 %13, 128, !dbg !14
  %16 = sext i32 %13 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = sext i32 %14 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %51 = fadd float %32, 0x3EE4F8B580000000, !dbg !25
  %52 = fadd float %33, 0x3EE4F8B580000000, !dbg !25
  %53 = fadd float %34, 0x3EE4F8B580000000, !dbg !25
  %54 = fadd float %35, 0x3EE4F8B580000000, !dbg !25
  %55 = fadd float %41, 0x3EE4F8B580000000, !dbg !25
  %56 = fadd float %42, 0x3EE4F8B580000000, !dbg !25
  %57 = fadd float %43, 0x3EE4F8B580000000, !dbg !25
  %58 = fadd float %44, 0x3EE4F8B580000000, !dbg !25
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %59, 0, !dbg !26
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %60, 0, !dbg !26
  br i1 %.not.i, label %66, label %61, !dbg !26

61:                                               ; preds = %7
  br i1 %.not1.i, label %64, label %62, !dbg !26

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

66:                                               ; preds = %7
  br i1 %.not1.i, label %69, label %67, !dbg !26

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !26
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %71, 0, !dbg !26
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !26
  br i1 %.not.i1, label %78, label %73, !dbg !26

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !26

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !26

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !26
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %83, 0, !dbg !26
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %84, 0, !dbg !26
  br i1 %.not.i6, label %90, label %85, !dbg !26

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !26

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !26

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %86, %88, %91, %93
  %.0.i8 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !26
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %95, 0, !dbg !26
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %96, 0, !dbg !26
  br i1 %.not.i11, label %102, label %97, !dbg !26

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !26

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !26

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %98, %100, %103, %105
  %.0.i13 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !26
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i16 = icmp eq i32 %107, 0, !dbg !26
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i19 = icmp eq i32 %108, 0, !dbg !26
  br i1 %.not.i16, label %114, label %109, !dbg !26

109:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %112, label %110, !dbg !26

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

114:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %117, label %115, !dbg !26

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %110, %112, %115, %117
  %.0.i18 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !26
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i21 = icmp eq i32 %119, 0, !dbg !26
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i24 = icmp eq i32 %120, 0, !dbg !26
  br i1 %.not.i21, label %126, label %121, !dbg !26

121:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %124, label %122, !dbg !26

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

126:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %129, label %127, !dbg !26

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !26
  br label %__nv_sqrtf.exit25, !dbg !26

__nv_sqrtf.exit25:                                ; preds = %122, %124, %127, %129
  %.0.i23 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !26
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i26 = icmp eq i32 %131, 0, !dbg !26
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i29 = icmp eq i32 %132, 0, !dbg !26
  br i1 %.not.i26, label %138, label %133, !dbg !26

133:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %136, label %134, !dbg !26

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

138:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %141, label %139, !dbg !26

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !26
  br label %__nv_sqrtf.exit30, !dbg !26

__nv_sqrtf.exit30:                                ; preds = %134, %136, %139, %141
  %.0.i28 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !26
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i31 = icmp eq i32 %143, 0, !dbg !26
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i34 = icmp eq i32 %144, 0, !dbg !26
  br i1 %.not.i31, label %150, label %145, !dbg !26

145:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %148, label %146, !dbg !26

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

150:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %153, label %151, !dbg !26

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !26
  br label %__nv_sqrtf.exit35, !dbg !26

__nv_sqrtf.exit35:                                ; preds = %146, %148, %151, %153
  %.0.i33 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !26
  %155 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %156 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %157 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %158 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %159 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %160 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %161 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %162 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %163 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %164 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %165 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %166 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %167 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %169 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %170 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %171 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %172 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %173 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %174 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %176 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %177 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %178 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %179 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %181 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %184 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !27
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !27
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !27
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !27
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !27
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !27
  %195 = insertelement <8 x i32> poison, i32 %155, i64 0, !dbg !16
  %196 = insertelement <8 x i32> %195, i32 %157, i64 1, !dbg !16
  %197 = insertelement <8 x i32> %196, i32 %159, i64 2, !dbg !16
  %198 = insertelement <8 x i32> %197, i32 %161, i64 3, !dbg !16
  %199 = insertelement <8 x i32> %198, i32 %163, i64 4, !dbg !16
  %200 = insertelement <8 x i32> %199, i32 %165, i64 5, !dbg !16
  %201 = insertelement <8 x i32> %200, i32 %167, i64 6, !dbg !16
  %202 = insertelement <8 x i32> %201, i32 %169, i64 7, !dbg !16
  %203 = bitcast <8 x i32> %202 to <8 x float>, !dbg !16
  %204 = insertelement <8 x i32> poison, i32 %156, i64 0, !dbg !18
  %205 = insertelement <8 x i32> %204, i32 %158, i64 1, !dbg !18
  %206 = insertelement <8 x i32> %205, i32 %160, i64 2, !dbg !18
  %207 = insertelement <8 x i32> %206, i32 %162, i64 3, !dbg !18
  %208 = insertelement <8 x i32> %207, i32 %164, i64 4, !dbg !18
  %209 = insertelement <8 x i32> %208, i32 %166, i64 5, !dbg !18
  %210 = insertelement <8 x i32> %209, i32 %168, i64 6, !dbg !18
  %211 = insertelement <8 x i32> %210, i32 %170, i64 7, !dbg !18
  %212 = bitcast <8 x i32> %211 to <8 x float>, !dbg !18
  %213 = fsub <8 x float> %203, %212, !dbg !28
  %214 = insertelement <8 x i32> poison, i32 %171, i64 0, !dbg !24
  %215 = insertelement <8 x i32> %214, i32 %172, i64 1, !dbg !24
  %216 = insertelement <8 x i32> %215, i32 %173, i64 2, !dbg !24
  %217 = insertelement <8 x i32> %216, i32 %174, i64 3, !dbg !24
  %218 = insertelement <8 x i32> %217, i32 %175, i64 4, !dbg !24
  %219 = insertelement <8 x i32> %218, i32 %176, i64 5, !dbg !24
  %220 = insertelement <8 x i32> %219, i32 %177, i64 6, !dbg !24
  %221 = insertelement <8 x i32> %220, i32 %178, i64 7, !dbg !24
  %222 = bitcast <8 x i32> %221 to <8 x float>, !dbg !24
  %223 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !22
  %224 = insertelement <8 x i32> %223, i32 %180, i64 1, !dbg !22
  %225 = insertelement <8 x i32> %224, i32 %181, i64 2, !dbg !22
  %226 = insertelement <8 x i32> %225, i32 %182, i64 3, !dbg !22
  %227 = insertelement <8 x i32> %226, i32 %183, i64 4, !dbg !22
  %228 = insertelement <8 x i32> %227, i32 %184, i64 5, !dbg !22
  %229 = insertelement <8 x i32> %228, i32 %185, i64 6, !dbg !22
  %230 = insertelement <8 x i32> %229, i32 %186, i64 7, !dbg !22
  %231 = bitcast <8 x i32> %230 to <8 x float>, !dbg !22
  %232 = insertelement <8 x float> poison, float %194, i64 0, !dbg !29
  %233 = insertelement <8 x float> %232, float %193, i64 1, !dbg !29
  %234 = insertelement <8 x float> %233, float %192, i64 2, !dbg !29
  %235 = insertelement <8 x float> %234, float %191, i64 3, !dbg !29
  %236 = insertelement <8 x float> %235, float %190, i64 4, !dbg !29
  %237 = insertelement <8 x float> %236, float %189, i64 5, !dbg !29
  %238 = insertelement <8 x float> %237, float %188, i64 6, !dbg !29
  %239 = insertelement <8 x float> %238, float %187, i64 7, !dbg !29
  %240 = fmul <8 x float> %213, %239, !dbg !29
  %241 = fmul <8 x float> %240, %231, !dbg !30
  %242 = fadd <8 x float> %241, %222, !dbg !31
  %243 = fcmp olt <8 x float> %242, zeroinitializer, !dbg !32
  %244 = extractelement <8 x i1> %243, i64 7, !dbg !36
  %bc = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %245 = extractelement <8 x i32> %bc, i64 7, !dbg !37
  %246 = extractelement <8 x i1> %243, i64 6, !dbg !36
  %bc36 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %247 = extractelement <8 x i32> %bc36, i64 6, !dbg !37
  %248 = extractelement <8 x i1> %243, i64 5, !dbg !36
  %bc37 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %249 = extractelement <8 x i32> %bc37, i64 5, !dbg !37
  %250 = extractelement <8 x i1> %243, i64 4, !dbg !36
  %bc38 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %251 = extractelement <8 x i32> %bc38, i64 4, !dbg !37
  %252 = extractelement <8 x i1> %243, i64 3, !dbg !36
  %bc39 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %253 = extractelement <8 x i32> %bc39, i64 3, !dbg !37
  %254 = extractelement <8 x i1> %243, i64 2, !dbg !36
  %bc40 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %255 = extractelement <8 x i32> %bc40, i64 2, !dbg !37
  %256 = extractelement <8 x i1> %243, i64 1, !dbg !36
  %bc41 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %257 = extractelement <8 x i32> %bc41, i64 1, !dbg !37
  %258 = extractelement <8 x i1> %243, i64 0, !dbg !36
  %bc42 = bitcast <8 x float> %242 to <8 x i32>, !dbg !37
  %259 = extractelement <8 x i32> %bc42, i64 0, !dbg !37
  %260 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !38
  %261 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !38
  %262 = select i1 %244, i32 0, i32 %245, !dbg !37
  %263 = select i1 %246, i32 0, i32 %247, !dbg !37
  %264 = select i1 %248, i32 0, i32 %249, !dbg !37
  %265 = select i1 %250, i32 0, i32 %251, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %260, i1 true) #3, !dbg !37
  %266 = select i1 %252, i32 0, i32 %253, !dbg !37
  %267 = select i1 %254, i32 0, i32 %255, !dbg !37
  %268 = select i1 %256, i32 0, i32 %257, !dbg !37
  %269 = select i1 %258, i32 0, i32 %259, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %267, i32 %268, i32 %269, ptr addrspace(1) %261, i1 true) #3, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpsguh6q3axr5k2uqzbpaiphb7vxpcz4de4qldpng2v7uxxwvp4z.py", directory: "/tmp/torchinductor_meng/ps")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 18, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 31, scope: !7)
!22 = !DILocation(line: 28, column: 36, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 33, column: 26, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 30, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 20, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 68, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 42, column: 42, scope: !7)
!36 = !DILocation(line: 71, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 43, column: 37, scope: !7)
!38 = !DILocation(line: 43, column: 25, scope: !7)
!39 = !DILocation(line: 43, column: 4, scope: !7)
