; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 50176, !dbg !14
  %15 = srem i32 %13, 256, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 %14) #3, !dbg !17
  %19 = sext i32 %15 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %14) #3, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %14) #3, !dbg !25
  %36 = fadd float %28, 0x3EE4F8B580000000, !dbg !26
  %37 = fadd float %29, 0x3EE4F8B580000000, !dbg !26
  %38 = fadd float %30, 0x3EE4F8B580000000, !dbg !26
  %39 = fadd float %31, 0x3EE4F8B580000000, !dbg !26
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %40, 0, !dbg !27
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %41, 0, !dbg !27
  br i1 %.not.i, label %47, label %42, !dbg !27

42:                                               ; preds = %7
  br i1 %.not1.i, label %45, label %43, !dbg !27

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

47:                                               ; preds = %7
  br i1 %.not1.i, label %50, label %48, !dbg !27

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !27
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %52, 0, !dbg !27
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !27
  br i1 %.not.i1, label %59, label %54, !dbg !27

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !27

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !27

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !27
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %64, 0, !dbg !27
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %65, 0, !dbg !27
  br i1 %.not.i6, label %71, label %66, !dbg !27

66:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %69, label %67, !dbg !27

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

71:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %74, label %72, !dbg !27

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %67, %69, %72, %74
  %.0.i8 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !27
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %76, 0, !dbg !27
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %77, 0, !dbg !27
  br i1 %.not.i11, label %83, label %78, !dbg !27

78:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %81, label %79, !dbg !27

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

83:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %86, label %84, !dbg !27

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %79, %81, %84, %86
  %.0.i13 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %89 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !19
  %90 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %91 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !19
  %92 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %93 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !19
  %94 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %95 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !19
  %96 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %103 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %108 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !17
  %109 = insertelement <4 x i32> %108, i32 %90, i64 1, !dbg !17
  %110 = insertelement <4 x i32> %109, i32 %92, i64 2, !dbg !17
  %111 = insertelement <4 x i32> %110, i32 %94, i64 3, !dbg !17
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !17
  %113 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !19
  %114 = insertelement <4 x i32> %113, i32 %91, i64 1, !dbg !19
  %115 = insertelement <4 x i32> %114, i32 %93, i64 2, !dbg !19
  %116 = insertelement <4 x i32> %115, i32 %95, i64 3, !dbg !19
  %117 = bitcast <4 x i32> %116 to <4 x float>, !dbg !19
  %118 = fsub <4 x float> %112, %117, !dbg !29
  %119 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !25
  %120 = insertelement <4 x i32> %119, i32 %97, i64 1, !dbg !25
  %121 = insertelement <4 x i32> %120, i32 %98, i64 2, !dbg !25
  %122 = insertelement <4 x i32> %121, i32 %99, i64 3, !dbg !25
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !25
  %124 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !23
  %125 = insertelement <4 x i32> %124, i32 %101, i64 1, !dbg !23
  %126 = insertelement <4 x i32> %125, i32 %102, i64 2, !dbg !23
  %127 = insertelement <4 x i32> %126, i32 %103, i64 3, !dbg !23
  %128 = bitcast <4 x i32> %127 to <4 x float>, !dbg !23
  %129 = insertelement <4 x float> poison, float %107, i64 0, !dbg !30
  %130 = insertelement <4 x float> %129, float %106, i64 1, !dbg !30
  %131 = insertelement <4 x float> %130, float %105, i64 2, !dbg !30
  %132 = insertelement <4 x float> %131, float %104, i64 3, !dbg !30
  %133 = fmul <4 x float> %118, %132, !dbg !30
  %134 = fmul <4 x float> %133, %128, !dbg !31
  %135 = fadd <4 x float> %134, %123, !dbg !32
  %136 = fcmp olt <4 x float> %135, zeroinitializer, !dbg !33
  %137 = extractelement <4 x i1> %136, i64 3, !dbg !37
  %bc = bitcast <4 x float> %135 to <4 x i32>, !dbg !38
  %138 = extractelement <4 x i32> %bc, i64 3, !dbg !38
  %139 = extractelement <4 x i1> %136, i64 2, !dbg !37
  %bc16 = bitcast <4 x float> %135 to <4 x i32>, !dbg !38
  %140 = extractelement <4 x i32> %bc16, i64 2, !dbg !38
  %141 = extractelement <4 x i1> %136, i64 1, !dbg !37
  %bc17 = bitcast <4 x float> %135 to <4 x i32>, !dbg !38
  %142 = extractelement <4 x i32> %bc17, i64 1, !dbg !38
  %143 = extractelement <4 x i1> %136, i64 0, !dbg !37
  %bc18 = bitcast <4 x float> %135 to <4 x i32>, !dbg !38
  %144 = extractelement <4 x i32> %bc18, i64 0, !dbg !38
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %16, !dbg !39
  %146 = select i1 %137, i32 0, i32 %138, !dbg !38
  %147 = select i1 %139, i32 0, i32 %140, !dbg !38
  %148 = select i1 %141, i32 0, i32 %142, !dbg !38
  %149 = select i1 %143, i32 0, i32 %144, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %146, i32 %147, i32 %148, i32 %149, ptr addrspace(1) %145, i1 %14) #3, !dbg !38
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpqhmmqesqn3k5h2txboxqn6lpabsdoketripu7wbye2e52bxfij.py", directory: "/tmp/torchinductor_meng/pq")
!4 = !{ptr @triton_, !"kernel", i32 1}
!5 = !{ptr @triton_, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_", linkageName: "triton_", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 20, column: 33, scope: !7)
!12 = !DILocation(line: 21, column: 36, scope: !7)
!13 = !DILocation(line: 21, column: 23, scope: !7)
!14 = !DILocation(line: 22, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 18, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 35, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 31, scope: !7)
!23 = !DILocation(line: 28, column: 36, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 18, scope: !7)
!27 = !DILocation(line: 33, column: 26, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 30, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 20, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 68, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/spacemit/lib/python3.10/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 42, column: 42, scope: !7)
!37 = !DILocation(line: 71, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 43, column: 37, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 4, scope: !7)
