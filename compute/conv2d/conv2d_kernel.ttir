module {
  tt.func public @conv2d_kernel_0d1de2de34c5678d9101112c131415de16d17de18de1920c212223c24c25de26de27de28de29c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i32, %arg4: i32 {tt.equal_to_1 = 1 : i32}, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32 {tt.equal_to_1 = 1 : i32}, %arg13: i32, %arg14: i32, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg16: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg18: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg19: i32, %arg20: i32 {tt.equal_to_1 = 1 : i32}, %arg21: i32, %arg22: i32, %arg23: i32 {tt.equal_to_1 = 1 : i32}, %arg24: i32 {tt.equal_to_1 = 1 : i32}, %arg25: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg26: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg27: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg28: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg29: i32 {tt.equal_to_1 = 1 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %0 = tt.get_program_id x : i32
    scf.for %arg30 = %c0_i32 to %arg15 step %c1_i32  : i32 {
      %1 = arith.muli %arg21, %arg22 : i32
      scf.for %arg31 = %c0_i32 to %1 step %c1_i32  : i32 {
        %2 = arith.divsi %arg31, %arg22 : i32
        %3 = arith.remsi %arg31, %arg22 : i32
        %4 = arith.muli %2, %arg23 : i32
        %5 = arith.subi %4, %arg25 : i32
        %6 = arith.muli %3, %arg24 : i32
        %7 = arith.subi %6, %arg26 : i32
        %8 = scf.for %arg32 = %c0_i32 to %arg7 step %c1_i32 iter_args(%arg33 = %cst) -> (f32)  : i32 {
          %17 = arith.muli %arg30, %arg9 : i32
          %18 = arith.muli %arg32, %arg10 : i32
          %19 = arith.addi %17, %18 : i32
          %20 = arith.muli %0, %arg1 : i32
          %21 = arith.muli %arg32, %arg2 : i32
          %22 = arith.addi %20, %21 : i32
          %23 = scf.for %arg34 = %c0_i32 to %arg13 step %c1_i32 iter_args(%arg35 = %arg33) -> (f32)  : i32 {
            %24 = arith.muli %arg34, %arg27 : i32
            %25 = arith.addi %5, %24 : i32
            %26 = arith.cmpi slt, %25, %c0_i32 : i32
            %27 = arith.cmpi sge, %25, %arg5 : i32
            %28 = arith.ori %26, %27 : i1
            %29 = scf.if %28 -> (f32) {
              scf.yield %arg35 : f32
            } else {
              %30 = scf.for %arg36 = %c0_i32 to %arg14 step %c1_i32 iter_args(%arg37 = %arg35) -> (f32)  : i32 {
                %31 = arith.muli %arg36, %arg28 : i32
                %32 = arith.addi %7, %31 : i32
                %33 = arith.cmpi slt, %32, %c0_i32 : i32
                %34 = arith.cmpi sge, %32, %arg6 : i32
                %35 = arith.ori %33, %34 : i1
                %36 = scf.if %35 -> (f32) {
                  scf.yield %arg37 : f32
                } else {
                  %37 = tt.addptr %arg8, %19 : !tt.ptr<f32, 1>, i32
                  %38 = arith.muli %arg34, %arg11 : i32
                  %39 = tt.addptr %37, %38 : !tt.ptr<f32, 1>, i32
                  %40 = arith.muli %arg36, %arg12 : i32
                  %41 = tt.addptr %39, %40 : !tt.ptr<f32, 1>, i32
                  %42 = tt.load %41 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
                  %43 = tt.addptr %arg0, %22 : !tt.ptr<f32, 1>, i32
                  %44 = arith.muli %25, %arg3 : i32
                  %45 = tt.addptr %43, %44 : !tt.ptr<f32, 1>, i32
                  %46 = arith.muli %32, %arg4 : i32
                  %47 = tt.addptr %45, %46 : !tt.ptr<f32, 1>, i32
                  %48 = tt.load %47 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
                  %49 = arith.mulf %48, %42 : f32
                  %50 = arith.addf %arg37, %49 : f32
                  scf.yield %50 : f32
                }
                scf.yield %36 : f32
              }
              scf.yield %30 : f32
            }
            scf.yield %29 : f32
          }
          scf.yield %23 : f32
        }
        %9 = arith.muli %0, %arg17 : i32
        %10 = arith.muli %arg30, %arg18 : i32
        %11 = arith.addi %9, %10 : i32
        %12 = arith.muli %2, %arg19 : i32
        %13 = arith.addi %11, %12 : i32
        %14 = arith.muli %3, %arg20 : i32
        %15 = arith.addi %13, %14 : i32
        %16 = tt.addptr %arg16, %15 : !tt.ptr<f32, 1>, i32
        tt.store %16, %8 {cache = 1 : i32, evict = 1 : i32} : f32
      }
    }
    tt.return
  }
}
