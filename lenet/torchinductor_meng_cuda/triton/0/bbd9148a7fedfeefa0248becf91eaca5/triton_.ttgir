#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
module attributes {"triton_gpu.compute-capability" = 86 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton__0d1d2d3de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<25> : tensor<256xi32, #blocked>
    %cst_0 = arith.constant dense<24> : tensor<256xi32, #blocked>
    %cst_1 = arith.constant dense<1> : tensor<256xi32, #blocked>
    %cst_2 = arith.constant dense<48> : tensor<256xi32, #blocked>
    %cst_3 = arith.constant dense<2> : tensor<256xi32, #blocked>
    %cst_4 = arith.constant dense<12> : tensor<256xi32, #blocked>
    %cst_5 = arith.constant dense<864> : tensor<256xi32, #blocked>
    %c256_i32 = arith.constant 256 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c256_i32 : i32
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<256xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked>
    %5 = arith.cmpi slt, %4, %cst_5 : tensor<256xi32, #blocked>
    %6 = arith.remsi %4, %cst_4 : tensor<256xi32, #blocked>
    %7 = arith.divsi %4, %cst_4 : tensor<256xi32, #blocked>
    %8 = arith.remsi %7, %cst_4 : tensor<256xi32, #blocked>
    %9 = arith.muli %6, %cst_3 : tensor<256xi32, #blocked>
    %10 = arith.muli %7, %cst_2 : tensor<256xi32, #blocked>
    %11 = arith.addi %9, %10 : tensor<256xi32, #blocked>
    %12 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %13 = tt.addptr %12, %11 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %14 = tt.load %13, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %15 = arith.addi %9, %cst_1 : tensor<256xi32, #blocked>
    %16 = arith.addi %15, %10 : tensor<256xi32, #blocked>
    %17 = tt.addptr %12, %16 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %18 = tt.load %17, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %19 = arith.addi %9, %cst_0 : tensor<256xi32, #blocked>
    %20 = arith.addi %19, %10 : tensor<256xi32, #blocked>
    %21 = tt.addptr %12, %20 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %22 = tt.load %21, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %23 = arith.addi %9, %cst : tensor<256xi32, #blocked>
    %24 = arith.addi %23, %10 : tensor<256xi32, #blocked>
    %25 = tt.addptr %12, %24 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    %26 = tt.load %25, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<256xf32, #blocked>
    %27 = arith.cmpf ogt, %18, %14 : tensor<256xf32, #blocked>
    %28 = arith.cmpf une, %18, %18 : tensor<256xf32, #blocked>
    %29 = arith.ori %27, %28 : tensor<256xi1, #blocked>
    %30 = arith.select %29, %18, %14 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked>
    %31 = arith.cmpf ogt, %22, %30 : tensor<256xf32, #blocked>
    %32 = arith.cmpf une, %22, %22 : tensor<256xf32, #blocked>
    %33 = arith.ori %31, %32 : tensor<256xi1, #blocked>
    %34 = arith.select %33, %22, %30 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked>
    %35 = arith.cmpf ogt, %26, %34 : tensor<256xf32, #blocked>
    %36 = arith.cmpf une, %26, %26 : tensor<256xf32, #blocked>
    %37 = arith.ori %35, %36 : tensor<256xi1, #blocked>
    %38 = arith.select %37, %26, %34 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked>
    %39 = arith.muli %8, %cst_2 : tensor<256xi32, #blocked>
    %40 = arith.addi %15, %39 : tensor<256xi32, #blocked>
    %41 = arith.addi %9, %39 : tensor<256xi32, #blocked>
    %42 = arith.select %27, %40, %41 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked>
    %43 = arith.addi %19, %39 : tensor<256xi32, #blocked>
    %44 = arith.select %31, %43, %42 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked>
    %45 = arith.addi %23, %39 : tensor<256xi32, #blocked>
    %46 = arith.select %35, %45, %44 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked>
    %47 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<256x!tt.ptr<f32, 1>, #blocked>
    %48 = tt.addptr %47, %4 : tensor<256x!tt.ptr<f32, 1>, #blocked>, tensor<256xi32, #blocked>
    tt.store %48, %38, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<256xf32, #blocked>
    %49 = tt.splat %arg2 : (!tt.ptr<i64, 1>) -> tensor<256x!tt.ptr<i64, 1>, #blocked>
    %50 = tt.addptr %49, %4 : tensor<256x!tt.ptr<i64, 1>, #blocked>, tensor<256xi32, #blocked>
    %51 = arith.extsi %46 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked>
    tt.store %50, %51, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<256xi64, #blocked>
    tt.return
  }
}
