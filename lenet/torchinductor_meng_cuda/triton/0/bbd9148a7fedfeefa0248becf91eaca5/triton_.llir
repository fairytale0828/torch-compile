; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

define void @triton__0d1d2d3de(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !5 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !8
  %6 = shl i32 %5, 1, !dbg !8
  %7 = and i32 %6, 254, !dbg !8
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !9
  %9 = shl i32 %8, 8, !dbg !10
  %10 = or i32 %9, %7, !dbg !11
  %11 = or i32 %10, 1, !dbg !11
  %12 = icmp slt i32 %10, 864, !dbg !12
  %.frozen = freeze i32 %10
  %13 = sdiv i32 %.frozen, 12, !dbg !13
  %14 = mul i32 %13, 12
  %.decomposed = sub i32 %.frozen, %14
  %15 = srem i32 %11, 12, !dbg !14
  %16 = srem i32 %13, 12, !dbg !15
  %17 = shl nsw i32 %.decomposed, 1, !dbg !16
  %18 = shl nsw i32 %15, 1, !dbg !16
  %19 = mul i32 %13, 48, !dbg !17
  %20 = add i32 %17, %19, !dbg !18
  %21 = add i32 %19, %18, !dbg !18
  %22 = sext i32 %20 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = sext i32 %21 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %12) #1, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = or i32 %17, 1, !dbg !21
  %31 = or i32 %18, 1, !dbg !21
  %32 = add i32 %30, %19, !dbg !22
  %33 = add i32 %19, %31, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #1, !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #1, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = add nsw i32 %17, 24, !dbg !25
  %43 = add nsw i32 %18, 24, !dbg !25
  %44 = add i32 %42, %19, !dbg !26
  %45 = add i32 %19, %43, !dbg !26
  %46 = sext i32 %44 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !27
  %48 = sext i32 %45 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %12) #1, !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %12) #1, !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = add nsw i32 %17, 25, !dbg !29
  %55 = add nsw i32 %18, 25, !dbg !29
  %56 = add i32 %54, %19, !dbg !30
  %57 = add i32 %19, %55, !dbg !30
  %58 = sext i32 %56 to i64, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !31
  %60 = sext i32 %57 to i64, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !31
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %12) #1, !dbg !32
  %63 = bitcast i32 %62 to float, !dbg !32
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %12) #1, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = fcmp ogt float %39, %27, !dbg !33
  %67 = fcmp ogt float %41, %29, !dbg !33
  %68 = fcmp uno float %39, 0.000000e+00, !dbg !37
  %69 = fcmp uno float %41, 0.000000e+00, !dbg !37
  %70 = or i1 %66, %68, !dbg !38
  %71 = or i1 %67, %69, !dbg !38
  %72 = select i1 %70, float %39, float %27, !dbg !39
  %73 = select i1 %71, float %41, float %29, !dbg !39
  %74 = fcmp olt float %72, %51, !dbg !40
  %75 = fcmp olt float %73, %53, !dbg !40
  %76 = fcmp uno float %51, 0.000000e+00, !dbg !42
  %77 = fcmp uno float %53, 0.000000e+00, !dbg !42
  %78 = or i1 %76, %74, !dbg !43
  %79 = or i1 %77, %75, !dbg !43
  %80 = select i1 %78, float %51, float %72, !dbg !44
  %81 = select i1 %79, float %53, float %73, !dbg !44
  %82 = fcmp olt float %80, %63, !dbg !45
  %83 = fcmp olt float %81, %65, !dbg !45
  %84 = fcmp uno float %63, 0.000000e+00, !dbg !47
  %85 = fcmp uno float %65, 0.000000e+00, !dbg !47
  %86 = or i1 %84, %82, !dbg !48
  %87 = or i1 %85, %83, !dbg !48
  %88 = select i1 %86, float %63, float %80, !dbg !49
  %89 = select i1 %87, float %65, float %81, !dbg !49
  %90 = mul nsw i32 %16, 48, !dbg !50
  %.v = select i1 %66, i32 %30, i32 %17, !dbg !51
  %.v1 = select i1 %67, i32 %31, i32 %18, !dbg !51
  %.v2 = select i1 %74, i32 %42, i32 %.v, !dbg !52
  %.v3 = select i1 %75, i32 %43, i32 %.v1, !dbg !52
  %.v4 = select i1 %82, i32 %54, i32 %.v2, !dbg !53
  %91 = add nsw i32 %.v4, %90, !dbg !53
  %.v5 = select i1 %83, i32 %55, i32 %.v3, !dbg !53
  %92 = add nsw i32 %.v5, %90, !dbg !53
  %93 = sext i32 %10 to i64, !dbg !54
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !54
  %95 = bitcast float %88 to i32, !dbg !55
  %96 = bitcast float %89 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %96, ptr addrspace(1) %94, i1 %12) #1, !dbg !55
  %97 = getelementptr i64, ptr addrspace(1) %2, i64 %93, !dbg !56
  %98 = sext i32 %91 to i64, !dbg !57
  %99 = sext i32 %92 to i64, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %98, i64 %99, ptr addrspace(1) %97, i1 %12) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.dbg.cu = !{!1}
!nvvm.annotations = !{!3, !4, !4, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = distinct !DICompileUnit(language: DW_LANG_C, file: !2, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!2 = !DIFile(filename: "cimgutipvv5kjgxwf67sbbwqogy56anrg26z6thl24sas4klvg3e.py", directory: "/tmp/torchinductor_meng/im")
!3 = !{ptr @triton__0d1d2d3de, !"kernel", i32 1}
!4 = !{ptr @triton__0d1d2d3de, !"maxntidx", i32 128}
!5 = distinct !DISubprogram(name: "triton__0d1d2d3de", linkageName: "triton__0d1d2d3de", scope: !2, file: !2, line: 12, type: !6, scopeLine: 12, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 15, column: 36, scope: !5)
!9 = !DILocation(line: 14, column: 28, scope: !5)
!10 = !DILocation(line: 14, column: 33, scope: !5)
!11 = !DILocation(line: 15, column: 23, scope: !5)
!12 = !DILocation(line: 16, column: 21, scope: !5)
!13 = !DILocation(line: 18, column: 20, scope: !5)
!14 = !DILocation(line: 17, column: 18, scope: !5)
!15 = !DILocation(line: 20, column: 26, scope: !5)
!16 = !DILocation(line: 21, column: 33, scope: !5)
!17 = !DILocation(line: 21, column: 43, scope: !5)
!18 = !DILocation(line: 21, column: 40, scope: !5)
!19 = !DILocation(line: 21, column: 30, scope: !5)
!20 = !DILocation(line: 21, column: 49, scope: !5)
!21 = !DILocation(line: 22, column: 35, scope: !5)
!22 = !DILocation(line: 22, column: 44, scope: !5)
!23 = !DILocation(line: 22, column: 30, scope: !5)
!24 = !DILocation(line: 22, column: 53, scope: !5)
!25 = !DILocation(line: 23, column: 36, scope: !5)
!26 = !DILocation(line: 23, column: 45, scope: !5)
!27 = !DILocation(line: 23, column: 30, scope: !5)
!28 = !DILocation(line: 23, column: 54, scope: !5)
!29 = !DILocation(line: 24, column: 36, scope: !5)
!30 = !DILocation(line: 24, column: 45, scope: !5)
!31 = !DILocation(line: 24, column: 30, scope: !5)
!32 = !DILocation(line: 24, column: 54, scope: !5)
!33 = !DILocation(line: 36, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !5, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/meng/anaconda3/envs/ttcpu/lib/python3.10/site-packages/torch/_inductor")
!36 = !DILocation(line: 25, column: 40, scope: !34)
!37 = !DILocation(line: 38, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 38, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 39, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 36, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 26, column: 40, scope: !34)
!42 = !DILocation(line: 38, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 38, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 39, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 36, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 27, column: 40, scope: !34)
!47 = !DILocation(line: 38, column: 21, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 38, column: 16, scope: !34, inlinedAt: !46)
!49 = !DILocation(line: 39, column: 29, scope: !34, inlinedAt: !46)
!50 = !DILocation(line: 29, column: 28, scope: !5)
!51 = !DILocation(line: 31, column: 33, scope: !5)
!52 = !DILocation(line: 34, column: 35, scope: !5)
!53 = !DILocation(line: 37, column: 35, scope: !5)
!54 = !DILocation(line: 38, column: 25, scope: !5)
!55 = !DILocation(line: 38, column: 36, scope: !5)
!56 = !DILocation(line: 39, column: 25, scope: !5)
!57 = !DILocation(line: 39, column: 37, scope: !5)
!58 = !DILocation(line: 39, column: 4, scope: !5)
