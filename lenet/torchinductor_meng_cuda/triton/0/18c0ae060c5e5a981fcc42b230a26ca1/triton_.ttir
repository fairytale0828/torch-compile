module {
  tt.func public @triton__0d1d2de(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64, 1> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %cst = arith.constant dense<9> : tensor<128xi32>
    %cst_0 = arith.constant dense<8> : tensor<128xi32>
    %cst_1 = arith.constant dense<1> : tensor<128xi32>
    %cst_2 = arith.constant dense<16> : tensor<128xi32>
    %cst_3 = arith.constant dense<2> : tensor<128xi32>
    %cst_4 = arith.constant dense<4> : tensor<128xi32>
    %cst_5 = arith.constant dense<256> : tensor<128xi32>
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %0, %c128_i32 : i32
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %3 = tt.splat %1 : (i32) -> tensor<128xi32>
    %4 = arith.addi %3, %2 : tensor<128xi32>
    %5 = arith.cmpi slt, %4, %cst_5 : tensor<128xi32>
    %6 = arith.remsi %4, %cst_4 : tensor<128xi32>
    %7 = arith.divsi %4, %cst_4 : tensor<128xi32>
    %8 = arith.remsi %7, %cst_4 : tensor<128xi32>
    %9 = arith.muli %6, %cst_3 : tensor<128xi32>
    %10 = arith.muli %7, %cst_2 : tensor<128xi32>
    %11 = arith.addi %9, %10 : tensor<128xi32>
    %12 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<128x!tt.ptr<f32, 1>>
    %13 = tt.addptr %12, %11 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %14 = tt.load %13, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %15 = arith.addi %9, %cst_1 : tensor<128xi32>
    %16 = arith.addi %15, %10 : tensor<128xi32>
    %17 = tt.addptr %12, %16 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %18 = tt.load %17, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %19 = arith.addi %9, %cst_0 : tensor<128xi32>
    %20 = arith.addi %19, %10 : tensor<128xi32>
    %21 = tt.addptr %12, %20 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %22 = tt.load %21, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %23 = arith.addi %9, %cst : tensor<128xi32>
    %24 = arith.addi %23, %10 : tensor<128xi32>
    %25 = tt.addptr %12, %24 : tensor<128x!tt.ptr<f32, 1>>, tensor<128xi32>
    %26 = tt.load %25, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128xf32>
    %27 = arith.cmpf ogt, %18, %14 : tensor<128xf32>
    %28 = arith.muli %8, %cst_2 : tensor<128xi32>
    %29 = arith.addi %15, %28 : tensor<128xi32>
    %30 = arith.addi %9, %28 : tensor<128xi32>
    %31 = arith.select %27, %29, %30 : tensor<128xi1>, tensor<128xi32>
    %32 = arith.cmpf une, %18, %18 : tensor<128xf32>
    %33 = arith.ori %27, %32 : tensor<128xi1>
    %34 = arith.select %33, %18, %14 : tensor<128xi1>, tensor<128xf32>
    %35 = arith.cmpf ogt, %22, %34 : tensor<128xf32>
    %36 = arith.addi %19, %28 : tensor<128xi32>
    %37 = arith.select %35, %36, %31 : tensor<128xi1>, tensor<128xi32>
    %38 = arith.cmpf une, %22, %22 : tensor<128xf32>
    %39 = arith.ori %35, %38 : tensor<128xi1>
    %40 = arith.select %39, %22, %34 : tensor<128xi1>, tensor<128xf32>
    %41 = arith.cmpf ogt, %26, %40 : tensor<128xf32>
    %42 = arith.addi %23, %28 : tensor<128xi32>
    %43 = arith.select %41, %42, %37 : tensor<128xi1>, tensor<128xi32>
    %44 = tt.splat %arg1 : (!tt.ptr<i64, 1>) -> tensor<128x!tt.ptr<i64, 1>>
    %45 = tt.addptr %44, %4 : tensor<128x!tt.ptr<i64, 1>>, tensor<128xi32>
    %46 = arith.extsi %43 : tensor<128xi32> to tensor<128xi64>
    tt.store %45, %46, %5 {cache = 1 : i32, evict = 1 : i32} : tensor<128xi64>
    tt.return
  }
}
