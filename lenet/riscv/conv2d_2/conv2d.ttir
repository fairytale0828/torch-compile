module {
  tt.func public @conv2d_kernel_0d1de2de34c5678d9101112c131415de16d17d18de19de20e21c22e23e24c25c26de27de28c29c30c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg14: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg15: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg17: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg18: i32 {tt.max_divisibility = 8 : i32}, %arg19: i32 {tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.max_divisibility = 8 : i32}, %arg21: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg22: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %arg19, %arg20 : i32
    %2 = arith.muli %0, %arg1 : i32
    %3 = arith.muli %0, %arg16 : i32
    scf.for %arg23 = %c0_i32 to %arg13 step %c1_i32  : i32 {
      %4 = tt.addptr %arg14, %arg23 : !tt.ptr<f32, 1>, i32
      %5 = arith.muli %arg23, %arg8 : i32
      %6 = arith.muli %arg23, %arg17 : i32
      %7 = arith.addi %3, %6 : i32
      scf.for %arg24 = %c0_i32 to %1 step %c1_i32  : i32 {
        %8 = arith.divsi %arg24, %arg20 : i32
        %9 = arith.remsi %arg24, %arg20 : i32
        %10 = arith.subi %8, %arg21 : i32
        %11 = arith.subi %9, %arg22 : i32
        %12 = tt.load %4 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
        %13 = scf.for %arg25 = %c0_i32 to %arg6 step %c1_i32 iter_args(%arg26 = %cst) -> (f32)  : i32 {
          %19 = arith.muli %arg25, %arg9 : i32
          %20 = arith.addi %5, %19 : i32
          %21 = arith.muli %arg25, %arg2 : i32
          %22 = arith.addi %2, %21 : i32
          %23 = scf.for %arg27 = %c0_i32 to %arg11 step %c1_i32 iter_args(%arg28 = %arg26) -> (f32)  : i32 {
            %24 = arith.addi %10, %arg27 : i32
            %25 = arith.cmpi slt, %24, %c0_i32 : i32
            %26 = arith.cmpi sge, %24, %arg4 : i32
            %27 = arith.ori %25, %26 : i1
            %28 = scf.if %27 -> (f32) {
              scf.yield %arg28 : f32
            } else {
              %29 = scf.for %arg29 = %c0_i32 to %arg12 step %c1_i32 iter_args(%arg30 = %arg28) -> (f32)  : i32 {
                %30 = arith.addi %11, %arg29 : i32
                %31 = arith.cmpi slt, %30, %c0_i32 : i32
                %32 = arith.cmpi sge, %30, %arg5 : i32
                %33 = arith.ori %31, %32 : i1
                %34 = scf.if %33 -> (f32) {
                  scf.yield %arg30 : f32
                } else {
                  %35 = tt.addptr %arg7, %20 : !tt.ptr<f32, 1>, i32
                  %36 = arith.muli %arg27, %arg10 : i32
                  %37 = tt.addptr %35, %36 : !tt.ptr<f32, 1>, i32
                  %38 = tt.addptr %37, %arg29 : !tt.ptr<f32, 1>, i32
                  %39 = tt.load %38 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
                  %40 = tt.addptr %arg0, %22 : !tt.ptr<f32, 1>, i32
                  %41 = arith.muli %24, %arg3 : i32
                  %42 = tt.addptr %40, %41 : !tt.ptr<f32, 1>, i32
                  %43 = tt.addptr %42, %30 : !tt.ptr<f32, 1>, i32
                  %44 = tt.load %43 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
                  %45 = arith.mulf %44, %39 : f32
                  %46 = arith.addf %arg30, %45 : f32
                  scf.yield %46 : f32
                }
                scf.yield %34 : f32
              }
              scf.yield %29 : f32
            }
            scf.yield %28 : f32
          }
          scf.yield %23 : f32
        }
        %14 = arith.addf %13, %12 : f32
        %15 = arith.muli %8, %arg18 : i32
        %16 = arith.addi %7, %15 : i32
        %17 = arith.addi %16, %9 : i32
        %18 = tt.addptr %arg15, %17 : !tt.ptr<f32, 1>, i32
        tt.store %18, %14 {cache = 1 : i32, evict = 1 : i32} : f32
      }
    }
    tt.return
  }
}
