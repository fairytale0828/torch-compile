module {
  tt.func public @mm_kernel_0d1d2d3c4e5de6de7c8e9c10e11c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.max_divisibility = 8 : i32}, %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg6: i32 {tt.max_divisibility = 8 : i32}, %arg7: i32 {tt.max_divisibility = 8 : i32}) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32
    %c127_i32 = arith.constant 127 : i32
    %c0_i32 = arith.constant 0 : i32
    %c1_i32 = arith.constant 1 : i32
    %cst = arith.constant dense<32> : tensor<16x32xi32>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x128xf32>
    %c32_i32 = arith.constant 32 : i32
    %cst_1 = arith.constant dense<1> : tensor<16xi32>
    %c128_i32 = arith.constant 128 : i32
    %c16_i32 = arith.constant 16 : i32
    %c8_i32 = arith.constant 8 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.addi %arg3, %c127_i32 : i32
    %3 = arith.divsi %2, %c128_i32 : i32
    %4 = arith.muli %3, %c8_i32 : i32
    %5 = arith.divsi %0, %4 : i32
    %6 = arith.muli %5, %c8_i32 : i32
    %7 = arith.subi %c1_i32, %6 : i32
    %8 = arith.minsi %7, %c8_i32 : i32
    %9 = arith.remsi %0, %8 : i32
    %10 = arith.addi %6, %9 : i32
    %11 = arith.remsi %0, %4 : i32
    %12 = arith.divsi %11, %8 : i32
    %13 = arith.muli %12, %c128_i32 : i32
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %15 = tt.splat %13 : (i32) -> tensor<128xi32>
    %16 = arith.addi %15, %14 : tensor<128xi32>
    %17 = tt.splat %arg3 : (i32) -> tensor<128xi32>
    %18 = arith.remsi %16, %17 {tt.contiguity = dense<128> : tensor<1xi32>, tt.divisibility = dense<128> : tensor<1xi32>} : tensor<128xi32>
    %19 = arith.muli %1, %c32_i32 : i32
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %21 = tt.splat %19 : (i32) -> tensor<32xi32>
    %22 = arith.addi %21, %20 : tensor<32xi32>
    %23 = tt.expand_dims %22 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %24 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<1x32x!tt.ptr<f32, 1>>
    %25 = tt.addptr %24, %23 : tensor<1x32x!tt.ptr<f32, 1>>, tensor<1x32xi32>
    %26 = tt.broadcast %25 : (tensor<1x32x!tt.ptr<f32, 1>>) -> tensor<16x32x!tt.ptr<f32, 1>>
    %27 = tt.expand_dims %22 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %28 = tt.splat %arg6 : (i32) -> tensor<32x1xi32>
    %29 = arith.muli %27, %28 : tensor<32x1xi32>
    %30 = tt.expand_dims %18 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>
    %31 = tt.broadcast %29 : (tensor<32x1xi32>) -> tensor<32x128xi32>
    %32 = tt.broadcast %30 : (tensor<1x128xi32>) -> tensor<32x128xi32>
    %33 = arith.addi %31, %32 : tensor<32x128xi32>
    %34 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<32x128x!tt.ptr<f32, 1>>
    %35 = tt.addptr %34, %33 : tensor<32x128x!tt.ptr<f32, 1>>, tensor<32x128xi32>
    %36 = arith.addi %arg4, %c31_i32 : i32
    %37 = arith.divsi %36, %c32_i32 : i32
    %38 = arith.muli %arg6, %c32_i32 : i32
    %39 = tt.splat %38 : (i32) -> tensor<32x128xi32>
    %40:3 = scf.for %arg8 = %c0_i32 to %37 step %c1_i32 iter_args(%arg9 = %cst_0, %arg10 = %26, %arg11 = %35) -> (tensor<16x128xf32>, tensor<16x32x!tt.ptr<f32, 1>>, tensor<32x128x!tt.ptr<f32, 1>>)  : i32 {
      %61 = tt.load %arg10 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x32xf32>
      %62 = tt.load %arg11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf32>
      %63 = tt.dot %61, %62, %arg9 {allowTF32 = false, maxNumImpreciseAcc = 0 : i32} : tensor<16x32xf32> * tensor<32x128xf32> -> tensor<16x128xf32>
      %64 = tt.addptr %arg10, %cst : tensor<16x32x!tt.ptr<f32, 1>>, tensor<16x32xi32>
      %65 = tt.addptr %arg11, %39 : tensor<32x128x!tt.ptr<f32, 1>>, tensor<32x128xi32>
      scf.yield %63, %64, %65 : tensor<16x128xf32>, tensor<16x32x!tt.ptr<f32, 1>>, tensor<32x128x!tt.ptr<f32, 1>>
    }
    %41 = arith.muli %10, %c16_i32 : i32
    %42 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %43 = tt.splat %41 : (i32) -> tensor<16xi32>
    %44 = arith.addi %43, %42 : tensor<16xi32>
    %45 = tt.expand_dims %44 {axis = 1 : i32} : (tensor<16xi32>) -> tensor<16x1xi32>
    %46 = tt.splat %arg7 : (i32) -> tensor<16x1xi32>
    %47 = arith.muli %45, %46 : tensor<16x1xi32>
    %48 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>
    %49 = tt.broadcast %47 : (tensor<16x1xi32>) -> tensor<16x128xi32>
    %50 = tt.broadcast %48 : (tensor<1x128xi32>) -> tensor<16x128xi32>
    %51 = arith.addi %49, %50 : tensor<16x128xi32>
    %52 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<16x128x!tt.ptr<f32, 1>>
    %53 = tt.addptr %52, %51 : tensor<16x128x!tt.ptr<f32, 1>>, tensor<16x128xi32>
    %54 = arith.cmpi slt, %44, %cst_1 : tensor<16xi32>
    %55 = tt.expand_dims %54 {axis = 1 : i32} : (tensor<16xi1>) -> tensor<16x1xi1>
    %56 = arith.cmpi slt, %16, %17 : tensor<128xi32>
    %57 = tt.expand_dims %56 {axis = 0 : i32} : (tensor<128xi1>) -> tensor<1x128xi1>
    %58 = tt.broadcast %55 : (tensor<16x1xi1>) -> tensor<16x128xi1>
    %59 = tt.broadcast %57 : (tensor<1x128xi1>) -> tensor<16x128xi1>
    %60 = arith.andi %58, %59 : tensor<16x128xi1>
    tt.store %53, %40#0, %60 {cache = 1 : i32, evict = 1 : i32} : tensor<16x128xf32>
    tt.return
  }
}
