module {
  tt.func public @addmm_kernel_0d1d2d3d4c5678c910c1112c1314c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32, %arg8: i32, %arg9: i32) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant dense<32> : tensor<16x32xi32>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x128xf32>
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x128xf32>
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<16x32xf32>
    %cst_3 = arith.constant dense<1> : tensor<16x1xi32>
    %c128_i32 = arith.constant 128 : i32
    %c16_i32 = arith.constant 16 : i32
    %0 = tt.get_program_id x : i32
    %1 = tt.get_program_id y : i32
    %2 = arith.muli %0, %c16_i32 : i32
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32>
    %4 = tt.splat %2 : (i32) -> tensor<16xi32>
    %5 = arith.addi %4, %3 : tensor<16xi32>
    %6 = arith.muli %1, %c128_i32 : i32
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %8 = tt.splat %6 : (i32) -> tensor<128xi32>
    %9 = arith.addi %8, %7 : tensor<128xi32>
    %10 = tt.expand_dims %5 {axis = 1 : i32} : (tensor<16xi32>) -> tensor<16x1xi32>
    %11 = tt.splat %arg6 : (i32) -> tensor<16x1xi32>
    %12 = arith.muli %10, %11 : tensor<16x1xi32>
    %13 = tt.splat %arg0 : (!tt.ptr<f32, 1>) -> tensor<16x1x!tt.ptr<f32, 1>>
    %14 = tt.addptr %13, %12 : tensor<16x1x!tt.ptr<f32, 1>>, tensor<16x1xi32>
    %15 = tt.expand_dims %9 {axis = 0 : i32} : (tensor<128xi32>) -> tensor<1x128xi32>
    %16 = tt.broadcast %14 : (tensor<16x1x!tt.ptr<f32, 1>>) -> tensor<16x128x!tt.ptr<f32, 1>>
    %17 = tt.broadcast %15 : (tensor<1x128xi32>) -> tensor<16x128xi32>
    %18 = tt.addptr %16, %17 : tensor<16x128x!tt.ptr<f32, 1>>, tensor<16x128xi32>
    %19 = tt.splat %arg7 : (i32) -> tensor<16x1xi32>
    %20 = arith.muli %10, %19 : tensor<16x1xi32>
    %21 = tt.splat %arg1 : (!tt.ptr<f32, 1>) -> tensor<16x1x!tt.ptr<f32, 1>>
    %22 = tt.addptr %21, %20 : tensor<16x1x!tt.ptr<f32, 1>>, tensor<16x1xi32>
    %23 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %24 = tt.expand_dims %23 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32>
    %25 = tt.broadcast %22 : (tensor<16x1x!tt.ptr<f32, 1>>) -> tensor<16x32x!tt.ptr<f32, 1>>
    %26 = tt.broadcast %24 : (tensor<1x32xi32>) -> tensor<16x32xi32>
    %27 = tt.addptr %25, %26 : tensor<16x32x!tt.ptr<f32, 1>>, tensor<16x32xi32>
    %28 = tt.expand_dims %23 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %29 = tt.splat %arg8 : (i32) -> tensor<32x1xi32>
    %30 = arith.muli %28, %29 : tensor<32x1xi32>
    %31 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<32x1x!tt.ptr<f32, 1>>
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<f32, 1>>, tensor<32x1xi32>
    %33 = tt.broadcast %32 : (tensor<32x1x!tt.ptr<f32, 1>>) -> tensor<32x128x!tt.ptr<f32, 1>>
    %34 = tt.broadcast %15 : (tensor<1x128xi32>) -> tensor<32x128xi32>
    %35 = tt.addptr %33, %34 : tensor<32x128x!tt.ptr<f32, 1>>, tensor<32x128xi32>
    %36 = tt.splat %arg9 : (i32) -> tensor<16x1xi32>
    %37 = arith.muli %10, %36 : tensor<16x1xi32>
    %38 = tt.splat %arg3 : (!tt.ptr<f32, 1>) -> tensor<16x1x!tt.ptr<f32, 1>>
    %39 = tt.addptr %38, %37 : tensor<16x1x!tt.ptr<f32, 1>>, tensor<16x1xi32>
    %40 = tt.broadcast %39 : (tensor<16x1x!tt.ptr<f32, 1>>) -> tensor<16x128x!tt.ptr<f32, 1>>
    %41 = tt.addptr %40, %17 : tensor<16x128x!tt.ptr<f32, 1>>, tensor<16x128xi32>
    %42 = arith.cmpi slt, %10, %cst_3 : tensor<16x1xi32>
    %43 = tt.splat %arg5 : (i32) -> tensor<1x32xi32>
    %44 = arith.cmpi slt, %24, %43 : tensor<1x32xi32>
    %45 = tt.broadcast %42 : (tensor<16x1xi1>) -> tensor<16x32xi1>
    %46 = tt.broadcast %44 : (tensor<1x32xi1>) -> tensor<16x32xi1>
    %47 = arith.andi %45, %46 : tensor<16x32xi1>
    %48 = tt.splat %arg5 : (i32) -> tensor<32x1xi32>
    %49 = arith.cmpi slt, %28, %48 : tensor<32x1xi32>
    %50 = tt.splat %arg4 : (i32) -> tensor<1x128xi32>
    %51 = arith.cmpi slt, %15, %50 : tensor<1x128xi32>
    %52 = tt.broadcast %49 : (tensor<32x1xi1>) -> tensor<32x128xi1>
    %53 = tt.broadcast %51 : (tensor<1x128xi1>) -> tensor<32x128xi1>
    %54 = arith.andi %52, %53 : tensor<32x128xi1>
    %55 = arith.muli %arg8, %c32_i32 : i32
    %56 = tt.splat %55 : (i32) -> tensor<32x128xi32>
    %57:3 = scf.for %arg10 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg11 = %cst_0, %arg12 = %27, %arg13 = %35) -> (tensor<16x128xf32>, tensor<16x32x!tt.ptr<f32, 1>>, tensor<32x128x!tt.ptr<f32, 1>>)  : i32 {
      %66 = tt.load %arg12, %47, %cst_2 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x32xf32>
      %67 = tt.load %arg13, %54, %cst_1 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x128xf32>
      %68 = tt.dot %66, %67, %arg11 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<16x32xf32> * tensor<32x128xf32> -> tensor<16x128xf32>
      %69 = tt.addptr %arg12, %cst : tensor<16x32x!tt.ptr<f32, 1>>, tensor<16x32xi32>
      %70 = tt.addptr %arg13, %56 : tensor<32x128x!tt.ptr<f32, 1>>, tensor<32x128xi32>
      scf.yield %68, %69, %70 : tensor<16x128xf32>, tensor<16x32x!tt.ptr<f32, 1>>, tensor<32x128x!tt.ptr<f32, 1>>
    }
    %58 = arith.cmpi slt, %10, %cst_3 : tensor<16x1xi32>
    %59 = tt.splat %arg4 : (i32) -> tensor<1x128xi32>
    %60 = arith.cmpi slt, %15, %59 : tensor<1x128xi32>
    %61 = tt.broadcast %58 : (tensor<16x1xi1>) -> tensor<16x128xi1>
    %62 = tt.broadcast %60 : (tensor<1x128xi1>) -> tensor<16x128xi1>
    %63 = arith.andi %61, %62 : tensor<16x128xi1>
    %64 = tt.load %18, %63, %cst_0 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x128xf32>
    %65 = arith.addf %57#0, %64 : tensor<16x128xf32>
    tt.store %41, %65, %63 {cache = 1 : i32, evict = 1 : i32} : tensor<16x128xf32>
    tt.return
  }
}
