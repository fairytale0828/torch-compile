module {
  tt.func public @conv2d_kernel_0d1de2de34c567c8d9101112c13141516d17d18de19de20e21c22e23e24c25c26de27de28c29c30c(%arg0: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg1: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg7: i32, %arg8: i32, %arg9: i32, %arg10: i32, %arg11: i32, %arg12: i32, %arg13: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg14: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32}, %arg15: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg16: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg17: i32 {tt.max_divisibility = 8 : i32}, %arg18: i32 {tt.max_divisibility = 8 : i32}, %arg19: i32 {tt.max_divisibility = 8 : i32}, %arg20: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}, %arg21: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 16 : i32}) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c0_i32 = arith.constant 0 : i32
    %cst = arith.constant 0.000000e+00 : f32
    %0 = tt.get_program_id x : i32
    %1 = arith.muli %arg18, %arg19 : i32
    %2 = arith.muli %0, %arg1 : i32
    %3 = arith.muli %0, %arg15 : i32
    scf.for %arg22 = %c0_i32 to %arg12 step %c1_i32  : i32 {
      %4 = tt.addptr %arg13, %arg22 : !tt.ptr<f32, 1>, i32
      %5 = arith.muli %arg22, %arg7 : i32
      %6 = arith.muli %arg22, %arg16 : i32
      %7 = arith.addi %3, %6 : i32
      scf.for %arg23 = %c0_i32 to %1 step %c1_i32  : i32 {
        %8 = arith.divsi %arg23, %arg19 : i32
        %9 = arith.remsi %arg23, %arg19 : i32
        %10 = arith.subi %8, %arg20 : i32
        %11 = arith.subi %9, %arg21 : i32
        %12 = tt.load %4 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
        %13 = scf.for %arg24 = %c0_i32 to %arg10 step %c1_i32 iter_args(%arg25 = %cst) -> (f32)  : i32 {
          %19 = arith.addi %10, %arg24 : i32
          %20 = arith.cmpi slt, %19, %c0_i32 : i32
          %21 = arith.cmpi sge, %19, %arg4 : i32
          %22 = arith.ori %20, %21 : i1
          %23 = scf.if %22 -> (f32) {
            scf.yield %arg25 : f32
          } else {
            %24 = scf.for %arg26 = %c0_i32 to %arg11 step %c1_i32 iter_args(%arg27 = %arg25) -> (f32)  : i32 {
              %25 = arith.addi %11, %arg26 : i32
              %26 = arith.cmpi slt, %25, %c0_i32 : i32
              %27 = arith.cmpi sge, %25, %arg5 : i32
              %28 = arith.ori %26, %27 : i1
              %29 = scf.if %28 -> (f32) {
                scf.yield %arg27 : f32
              } else {
                %30 = tt.addptr %arg6, %5 : !tt.ptr<f32, 1>, i32
                %31 = arith.muli %arg24, %arg9 : i32
                %32 = tt.addptr %30, %31 : !tt.ptr<f32, 1>, i32
                %33 = tt.addptr %32, %arg26 : !tt.ptr<f32, 1>, i32
                %34 = tt.load %33 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
                %35 = tt.addptr %arg0, %2 : !tt.ptr<f32, 1>, i32
                %36 = arith.muli %19, %arg3 : i32
                %37 = tt.addptr %35, %36 : !tt.ptr<f32, 1>, i32
                %38 = tt.addptr %37, %25 : !tt.ptr<f32, 1>, i32
                %39 = tt.load %38 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : f32
                %40 = arith.mulf %39, %34 : f32
                %41 = arith.addf %arg27, %40 : f32
                scf.yield %41 : f32
              }
              scf.yield %29 : f32
            }
            scf.yield %24 : f32
          }
          scf.yield %23 : f32
        }
        %14 = arith.addf %13, %12 : f32
        %15 = arith.muli %8, %arg17 : i32
        %16 = arith.addi %7, %15 : i32
        %17 = arith.addi %16, %9 : i32
        %18 = tt.addptr %arg14, %17 : !tt.ptr<f32, 1>, i32
        tt.store %18, %14 {cache = 1 : i32, evict = 1 : i32} : f32
      }
    }
    tt.return
  }
}
